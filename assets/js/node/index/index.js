"use strict";!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.webpackNumbers=t():e.webpackNumbers=t()}(globalThis,(function(){return(globalThis.webpackChunkwebpackNumbers=globalThis.webpackChunkwebpackNumbers||[]).push([[826],{756:(e,t,i)=>{i.d(t,{Z:()=>l});var o=i(15),n=i.n(o),s=i(645),r=i.n(s)()(n());r.push([e.id,"@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA,cAAc;AACd,oBAAoB;AACpB,mBAAmB",sourcesContent:["@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;"],sourceRoot:""}]);const l=r},954:(e,t,i)=>{i.r(t);var o=i(379),n=i.n(o),s=i(795),r=i.n(s),l=i(569),c=i.n(l),a=i(565),d=i.n(a),p=i(216),u=i.n(p),h=i(589),f=i.n(h),b=i(756),y={};y.styleTagTransform=f(),y.setAttributes=d(),y.insert=c().bind(null,"head"),y.domAPI=r(),y.insertStyleElement=u(),n()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;var v=i(558),m=i(191),g=function(e,t,i,o){return new(i||(i=Promise))((function(n,s){function r(e){try{c(o.next(e))}catch(e){s(e)}}function l(e){try{c(o.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,l)}c((o=o.apply(e,t||[])).next())}))};function _(e,t){return g(this,void 0,void 0,(function*(){t=null==t?{method:"GET"}:t;var i=new Headers;return i.append("Access-Control-Allow-Origin","*/*"),i.append("Accept","application/json, text/plain, */*"),i.append("Authorization","Bearer dskjsdr43930934j34934304934n34kkd3d89sdjsdjb349"),i.append("Content-Type","application/json"),t.headers=i,t.mode="cors",console.log({init:t}),yield fetch(e,t).then((e=>e.status>=200&&e.status<300?Promise.resolve(e):Promise.reject(new Error(e.statusText)))).then((e=>e.json())).then((e=>g(this,void 0,void 0,(function*(){return e})))).catch((function(e){throw console.error("Request failed",e),e}))}))}const w=new XMLHttpRequest,S=new URL(document.location.href);w.open("HEAD",S.href,!1),w.send(null);const I=new URLSearchParams(S.search);let x=[];I.forEach(((e,t)=>{const i={param:t,value:e};x.includes(i)||x.push(i)}));const R="https://api.Akwaaba.com/",$={IMAGES:{loadingGif1:"/assets/js/node/images/loading.gif",akwaabaLogo:"/assets/js/node/images/logo-inverse.png",loadingGif2:"/assets/js/node/images/loading2.gif",loadingGif3:"/assets/js/node/images/loading3.gif",errorNotFound:"/assets/js/node/images/error-not-found.webp"},HTTPS:{GET:new class{constructor(e){this.params=[],this.params=e}get(e){let t;return this.params.forEach((i=>{i.param===e&&(t=i)})),t}}(x),HEADERS:w.getAllResponseHeaders()},URLS:{API_BASE_URL:R,PUBLIC_BASE_URL:"https://Akwaaba.com/",CLICK_COM_BASE_URL:"https://clickcomgh.com/",GET_CLIENT_INFO:R+"subscription-quick-info/index",GET_SUBSCRIPTION_FEE:R+"subscription-quick-info/get-fee",PAY_SUBSCRIPTION_FEE:R+"subscription-quick-info/pay",GET_PAYMENT_STATUS:R+"subscription-quick-info/has-been-paid"},ERROR_MSG:"Something went wrong, please try again or contact us using the whatsapp button"};console.log({CONSTANTS:$});var O=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r};let T=class extends v.oi{constructor(){super(...arguments),this.size=32}render(){return v.dy`
      <div class="w-full block mb-2">
        <div class="flex justify-center">
            <div class="rounded-full overflow-hidden h-${this.size} w-${this.size} shadow-xl">
              <img src="${$.IMAGES.loadingGif3}" class="h-${this.size} w-${this.size} object-cover object-center">
            </div>
        </div>
      </div>
    `}createRenderRoot(){return this}};O([(0,m.Cb)({type:Number})],T.prototype,"size",void 0),T=O([(0,m.Mo)("is-loading")],T);let C=class extends v.oi{constructor(){super()}render(){return v.dy`
    <diV class="flex justify-around">
      <div class="relative px-4 mt-10">
        <div class="rounded-md overflow-hidden h-80 w-80 shadow-xl">
          <img src="${$.IMAGES.errorNotFound}" class="h-80 w-80 object-cover object-center">
        </div>
        <div class="relative px-4 -mt-2">
          <div class="bg-white px-4 py-2 rounded-lg border shadow-md">
            <h4 class="font-semibold text-lg text-center uppercase tracking-wider">client not found</h4>
          </div>
        </div>
      </div>
    </diV>
  `}createRenderRoot(){return this}};C=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r}([(0,m.Mo)("client-not-found")],C);var k=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r};let A=class extends v.oi{constructor(e){super(),this.clientInfo=null,this.clientInfo=e}render(){return null===this.clientInfo?v.dy`<is-loading></is-loading>`:void 0===this.clientInfo.error?v.dy`
        <diV class="flex justify-around">
          <div class="w-2/3 md:w-7/12 lg:w-5/12 xl:w-3/12">
            <div class="relative pb-5/12 md:pb-5/12">
              <img src="${this.clientInfo.image}" alt="${this.clientInfo.name} Logo"
                class="h-full w-full object-cover object-center rounded-lg absolute inset-0 border">
            </div>
            <div class="relative px-4 -mt-2">
              <div class="bg-white px-4 py-2 rounded-lg border shadow-md">
                <h4 class="font-semibold text-lg text-center">${this.clientInfo.name}</h4>
              </div>
            </div>
          </div>
        </diV>
      `:v.dy`
          <h1 class="text-red-500 font-bold tracking-wide text-center">
            ${this.clientInfo.error.error}...
          </h1>
        `}createRenderRoot(){return this}};k([(0,m.Cb)({type:Object})],A.prototype,"clientInfo",void 0),A=k([(0,m.Mo)("client-banner")],A);var j=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r};let E=class extends v.oi{constructor(){super(...arguments),this.input=null,this.error=!1,this.select=!1}render(){const e=this.input.id,t=this.input.name,i=this.error?"text-red-400 border-red-600":"";this.select=null!==this.select&&void 0!==this.select&&!1!==this.select,void 0===this.input.inputClass||this.input.inputClass;const o=void 0===this.input.inputClass?`appearance-none block w-full bg-gray-100 text-gray-700\n        border border-gray-200 rounded-md py-3 px-4 leading-tight\n        focus:outline-none bg- focus:bg-white focus:border-gray-500 ${i}`:this.input.inputClass,n=void 0===this.input.type?"text":this.input.type,s=void 0===this.input.label?"Label":this.input.label,r=(void 0===this.input.labelClass||this.input.labelClass,void 0===this.input.labelClass?"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2":this.input.labelClass),l=null!==this.input.disabled&&void 0!==this.input.disabled&&!1!==this.input.disabled;return!0===this.select?(e=>{const t=e.id,i=e.name,o=null!==e.selectOptions&&void 0!==e.selectOptions;return v.dy`
    <div class="w-full mb-4 md:mb-6">
      <label class="${e.labelClass}"> ${e.label}
        <select style="${e.style}" ?disabled="${e.disabled}" class="${e.inputClass}" placeholder="${e.placeholder}" id="${t}"
          name="${i}">
          ${!1===o?"":e.selectOptions.map((t=>{const i=null!==t.selected&&void 0!==t.selected&&!1!==t.selected;return!1===e.disabled?i?v.dy`<option value="${t.value}" ?selected="${t.selected}">
                  ${t.title}
                </option>`:v.dy`<option value="${t.value}">
                  ${t.title}
                </option>`:i?v.dy`<option value="${t.value}" ?disabled="${e.disabled}" ?selected="${t.selected}">
                  ${t.title}
                </option>`:v.dy`<option value="${t.value}" ?disabled="${e.disabled}">
                  ${t.title}
                </option>`}))}
        </select>
      </label>
    </div>
  `})({id:this.input.id,name:this.input.name,class:r,value:this.input.value,inputClass:o,label:s,labelClass:r,placeholder:this.input.placeholder,style:this.input.style,disabled:l,selectOptions:this.input.selectOptions}):!1===l?v.dy`
      <div class="w-full mb-4 md:mb-6">
        <label class="${r}"> ${s}
          <input type="${n}" style="${this.input.style}" class="${o}" placeholder="${this.input.placeholder}"
            id="${e}" name="${t}" value!="${this.input.value}"/>
        </label>
      </div>
    `:v.dy`
      <div class="w-full mb-4 md:mb-6">
        <label class="${r}"> ${s}
          <input type="${n}" style="${this.input.style}" ?disabled="${this.input.disabled}" class="${o}"
            placeholder="${this.input.placeholder}" id="${e}" name="${t}" value="${this.input.value}"/>
        </label>
      </div>
    `}createRenderRoot(){return this}};j([(0,m.Cb)({type:Object})],E.prototype,"input",void 0),j([(0,m.Cb)({type:Boolean})],E.prototype,"error",void 0),j([(0,m.Cb)({type:Boolean})],E.prototype,"select",void 0),E=j([(0,m.Mo)("form-input")],E);var P=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r};let D=class extends v.oi{constructor(){super(),this.message="",this.token="",this.visible=null,this.error=null,console.log({"this.visible":this.visible})}render(){return console.log({"this.visible":this.visible,"CONSTANTS.HTTPS.HEADERS":$.HTTPS.HEADERS}),this.visible?this.error?this._error("red"):this._success("green"):v.dy``}_success(e){return v.dy`
      <div class="w-full">
        <div class="my-4 block">
          <div class="block bg-${e}-50 pl-2 pr-4 py-2 rounded-md shadow-md">
            ${this._header(e)}
            <div class="text-sm uppercase flex justify-center my-2">
              <a type="button" class="inline-block px-5 py-3 rounded-lg shadow-md
              bg-green-900 text-sm text-white uppercase tracking-wider font-semibold"
                href="javascript:window.open('${$.URLS.PUBLIC_BASE_URL}pay?pay_token=${this.token}',
                  '_blank', 'width=640, height=480, status, toolbar=yes,scrollbars=yes,resizable=yes,top=500,
                  left=500, location')"> Click Here To Pay
              </a>
            </div>
          </div>
        </div>
      </div>
    `}_error(e){return v.dy`
      <div class="w-full">
        <div class="my-4 block">
          <div class="block bg-${e}-50 pl-2 pr-4 py-2 rounded-md shadow-md">
            ${this._header(e)}
          </div>
        </div>
      </div>
    `}_header(e){const t=v.dy`<div class="w-full text-${e}-700 uppercase text-sm">
      ${this.message}
    </div>`,i=v.dy`<div class="w-2">${this.__closeBtn()}</div>`;return v.dy`
      <div class="flex font-semibold">${t}${i}</div>
    `}__closeBtn(){return v.dy`
      <div class="flex">
        <button type="button" class="text-red-600 font-semibold -mt-2
          inline-block py-1 px-2 rounded-md shadow-lg text-sm tracking-wider"
          @click="${this.__closeBtnAction}">x</button>
      </div>
    `}__closeBtnAction(e){e.preventDefault(),this.visible=!1}createRenderRoot(){return this}};P([(0,m.Cb)({type:String})],D.prototype,"message",void 0),P([(0,m.Cb)({type:String})],D.prototype,"token",void 0),P([(0,m.Cb)({type:Boolean})],D.prototype,"visible",void 0),P([(0,m.Cb)({type:Boolean})],D.prototype,"error",void 0),D=P([(0,m.Mo)("contitnue-to-pay")],D);var B=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r};let L=class extends v.oi{constructor(){super(),this._fetch=!0,this._message="",this.clientId=0,this.token="",this.visible=null,this._error=null,this._loading=!1,console.log({"this.visible":this.visible}),this._loading=!0,setInterval((()=>{this._fetch&&this.getPaymentStatus().then((e=>{this._loading=!1}))}),2e3)}render(){return console.log({"this.visible":this.visible,"CONSTANTS.HTTPS.HEADERS":$.HTTPS.HEADERS}),this.visible?this._error?this._return("blue"):this._return("green"):v.dy``}_return(e){return v.dy`
      <div class="w-full">
        <div class="my-4 block">
          <div class="block bg-${e}-50 pl-2 pr-4 py-2 rounded-md shadow-md">
            ${this._header(e)}
          </div>
        </div>
      </div>
    `}_header(e){const t=v.dy`<div class="w-full text-${e}-700 uppercase text-sm">
  ${this._loading?v.dy`<is-loading size="16"></is-loading>`:this._message}
</div>`,i=v.dy`<div class="w-2">${this.__closeBtn()}</div>`;return v.dy`
      <div class="flex font-semibold">${t}${i}</div>
    `}__closeBtn(){return v.dy`
      <div class="flex">
        <button type="button" class="text-red-600 font-semibold -mt-2
                inline-block py-1 px-2 rounded-md shadow-lg text-sm tracking-wider"
          @click="${this.__closeBtnAction}">x</button>
      </div>
    `}__closeBtnAction(e){e.preventDefault(),this.visible=!1}getPaymentStatus(){return e=this,t=void 0,o=function*(){const e=yield function({clientId:e,token:t}){return i=this,o=void 0,s=function*(){let i=null;try{const o=yield _($.URLS.GET_PAYMENT_STATUS+"?client_id="+e+"&pay_token="+t);i=!0===o.error?{error:{error:o.msg}}:{msg:o.msg}}catch(e){return console.error({error:e}),{error:{error:$.ERROR_MSG}}}return i},new((n=void 0)||(n=Promise))((function(e,t){function r(e){try{c(s.next(e))}catch(e){t(e)}}function l(e){try{c(s.throw(e))}catch(e){t(e)}}function c(t){var i;t.done?e(t.value):(i=t.value,i instanceof n?i:new n((function(e){e(i)}))).then(r,l)}c((s=s.apply(i,o||[])).next())}));var i,o,n,s}({clientId:this.clientId,token:this.token});console.log({clientPaymentStatus:e}),void 0!==e.error?(this._error=!0,this._message="! "+e.error.error):(this._error=!1,this._fetch=!1,this._message=e.msg)},new((i=void 0)||(i=Promise))((function(n,s){function r(e){try{c(o.next(e))}catch(e){s(e)}}function l(e){try{c(o.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,l)}c((o=o.apply(e,t||[])).next())}));var e,t,i,o}createRenderRoot(){return this}};B([(0,m.Cb)({type:Boolean})],L.prototype,"_fetch",void 0),B([(0,m.Cb)({type:String})],L.prototype,"_message",void 0),B([(0,m.Cb)({type:Number})],L.prototype,"clientId",void 0),B([(0,m.Cb)({type:String})],L.prototype,"token",void 0),B([(0,m.Cb)({type:Boolean})],L.prototype,"visible",void 0),B([(0,m.Cb)({type:Boolean})],L.prototype,"_error",void 0),B([(0,m.Cb)({type:Boolean})],L.prototype,"_loading",void 0),L=B([(0,m.Mo)("payment-status")],L);var M=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r},N=function(e,t,i,o){return new(i||(i=Promise))((function(n,s){function r(e){try{c(o.next(e))}catch(e){s(e)}}function l(e){try{c(o.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,l)}c((o=o.apply(e,t||[])).next())}))};let F=class extends v.oi{constructor(e){super(),this.clientInfo=null,this.subscriptionFeeError=!1,this.subscriptionFee="GHC 00.00",this.subscriptionDurations=[],this._selectOption={id:0,name:"Select Subscription Duration"},this._paySuccess=!1,this._paySuccessToken="",this._paySuccessMessage="",this._paySuccessError=!1,this._paySuccessVisible=!1,this._payIsLoadingVal=!1,this._getFeeIsLoadingVal=!1,this.clientInfo=e}render(){if(null===this.clientInfo)return v.dy`<is-loading></is-loading>`;{let e=this.clientInfo.subscriptionDurations;return Array.isArray(e)?(e.includes(this._selectOption)||e.unshift(this._selectOption),v.dy`
          <diV class="flex justify-around -mt-6">
            <div class="w-full md:w-4/6 lg:w-7/12 xl:w-4/12">
              <form class="bg-white border rounded px-5 pt-6 pb-8 mb-4"
                action="" method="GET" @submit="${this.payActivationFee}">
                
                <form-input .input="${this.formInput_INPUT({id:"account_type",name:"account_type",label:"Account Type",placeholder:"Account Type",selectOptions:[{title:this.clientInfo.accountType.name,value:this.clientInfo.accountType.id,selected:!0}]})}" .select="${!0}"></form-input>
                <form-input .input="${this.formInput_INPUT({id:"client_membership_size",name:"client_membership_size",label:"Membership Size",placeholder:"Membership Size",selectOptions:[{title:this.clientInfo.membershipSize.name,value:this.clientInfo.membershipSize.id,selected:!0}]})}" .select="${!0}"></form-input>
                <form-input .input="${this.formInput_INPUT({id:"client_subscription_duration",name:"client_subscription_duration",label:"Select Subscription Duration",placeholder:"Select Subscription Duration",selectOptions:e.map((e=>({title:e.name,value:e.id})))})}" .select="${!0}" @change="${this.getSubscriptionFee}"></form-input>
                <is-loading size="16" id="get-fee-is-loading" class="${this._getFeeIsLoadingVal?"block":"hidden"}"></is-loading>
                <form-input .input="${this.formInput_INPUT({id:"client_subscription_fee",name:"client_subscription_fee",label:"Subscription Fee",placeholder:"Subscription Fee",disabled:!0,value:this.subscriptionFee})}" .select="${!1}" .error="${this.subscriptionFeeError}"></form-input>
                ${this._paySuccess?v.dy`<div class="items-center">
                    <contitnue-to-pay class="w-full" message="${this._paySuccessMessage}" 
                    token="${this._paySuccessToken}" ?visible="${this._paySuccessVisible}"
                    ?error="${this._paySuccessError}"></contitnue-to-pay>

                    ${this._paySuccessError?v.dy``:v.dy`<payment-status class="w-full" 
                    token="${this._paySuccessToken}" clientId="${this.clientInfo.clientId}" 
                    ?visible="${this._paySuccessVisible}">
                  </payment-status>`} </div>`:v.dy``}
                <is-loading size="16" id="pay-is-loading" class="${this._payIsLoadingVal?"block":"hidden"}"></is-loading>
                <div class="flex justify-center">
                  <button type="submit"
                    class="inline-block px-5 py-3 rounded-lg shadow-md bg-green-600 text-sm text-white uppercase tracking-wider font-semibold">
                    Pay Renewal Fee
                  </button>
                </div>
              </form>
            </div>
          </diV>
        `):v.dy``}}formInput_INPUT(e){return e}getSubscriptionFee(e){return N(this,void 0,void 0,(function*(){e.preventDefault(),this._getFeeIsLoadingVal=!0;const t=yield function({clientId:e,noDuration:t,durationId:i,accountTypeId:o,clientMembershipSizeId:n}){return s=this,r=void 0,c=function*(){let s=null;try{const r=yield _($.URLS.GET_SUBSCRIPTION_FEE+"?account_type_id="+o+"&no_duration="+t+"&client_id="+e+"&size_id="+n+"&duration_id="+i);s=!0===r.error?{error:{error:r.msg}}:{fee:r.data.fee}}catch(e){return console.error({error:e}),{error:{error:$.ERROR_MSG}}}return s},new((l=void 0)||(l=Promise))((function(e,t){function i(e){try{n(c.next(e))}catch(e){t(e)}}function o(e){try{n(c.throw(e))}catch(e){t(e)}}function n(t){var n;t.done?e(t.value):(n=t.value,n instanceof l?n:new l((function(e){e(n)}))).then(i,o)}n((c=c.apply(s,r||[])).next())}));var s,r,l,c}({noDuration:!1,clientId:this.clientInfo.clientId,accountTypeId:this._accountType.value,durationId:this._clientSubscriptionDuration.value,clientMembershipSizeId:this._clientMembershipSize.value});void 0!==t.error?(this.subscriptionFeeError=!0,this.subscriptionFee="Error! "+t.error.error):(this.subscriptionFeeError=!1,this.subscriptionFee="GHC "+t.fee),this._getFeeIsLoadingVal=!1}))}payActivationFee(e){return N(this,void 0,void 0,(function*(){e.preventDefault(),console.log({e}),this._payIsLoadingVal=!0,this._paySuccessVisible=!1,this._paySuccessError=!1;const t=yield function({clientId:e,accountTypeId:t,clientMembershipSizeId:i,clientSubscriptionDurationId:o}){return n=this,s=void 0,l=function*(){let n=null;try{const s=JSON.stringify({client_id:e,account_type:t,client_membership_size:i,client_subscription_duration:o}),r=yield _($.URLS.PAY_SUBSCRIPTION_FEE,{method:"POST",body:s});if(console.log({response:r}),!0===r.error){let e;if(Array.isArray(r.data)){const t=r.data;console.log({DATAS:t});let i="";t.forEach((e=>{i+=e.msg+"\n"})),e={error:{error:i}}}else e={error:{error:r.msg}};n=e}else{let e={msg:r.msg,url:r.url};console.log({getPayResponse:e}),n=e}return n}catch(e){return console.error({error:e}),{error:{error:$.ERROR_MSG}}}},new((r=void 0)||(r=Promise))((function(e,t){function i(e){try{c(l.next(e))}catch(e){t(e)}}function o(e){try{c(l.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,o)}c((l=l.apply(n,s||[])).next())}));var n,s,r,l}({clientId:this.clientInfo.clientId,accountTypeId:this._accountType.value,clientMembershipSizeId:this._clientMembershipSize.value,clientSubscriptionDurationId:this._clientSubscriptionDuration.value});this._paySuccess=!0,this._paySuccessVisible=!0,console.log({payActivationFee:t}),void 0===t.error||null===t.error?(this._paySuccessToken=t.url,this._paySuccessMessage=t.msg):(this._paySuccessError=!0,this._paySuccessMessage=t.error.error),this._payIsLoadingVal=!1}))}createRenderRoot(){return this}};M([(0,m.IO)("#account_type")],F.prototype,"_accountType",void 0),M([(0,m.IO)("#client_membership_size")],F.prototype,"_clientMembershipSize",void 0),M([(0,m.IO)("#client_subscription_duration")],F.prototype,"_clientSubscriptionDuration",void 0),M([(0,m.IO)("#client_subscription_fee")],F.prototype,"_clientSubscriptionFee",void 0),M([(0,m.IO)("#pay-is-loading")],F.prototype,"_payIsLoading",void 0),M([(0,m.IO)("#get-fee-is-loading")],F.prototype,"_getFeeIsLoading",void 0),M([(0,m.IO)("#form-submit-button")],F.prototype,"_formSubmitButton",void 0),M([(0,m.Cb)({type:Object})],F.prototype,"clientInfo",void 0),M([(0,m.Cb)({type:Boolean})],F.prototype,"subscriptionFeeError",void 0),M([(0,m.Cb)({type:String})],F.prototype,"subscriptionFee",void 0),M([(0,m.Cb)({type:Array})],F.prototype,"subscriptionDurations",void 0),M([(0,m.Cb)({type:Object})],F.prototype,"_selectOption",void 0),M([(0,m.Cb)({type:Boolean})],F.prototype,"_paySuccess",void 0),M([(0,m.Cb)({type:String})],F.prototype,"_paySuccessToken",void 0),M([(0,m.Cb)({type:String})],F.prototype,"_paySuccessMessage",void 0),M([(0,m.Cb)({type:Boolean})],F.prototype,"_paySuccessError",void 0),M([(0,m.Cb)({type:Boolean})],F.prototype,"_paySuccessVisible",void 0),M([(0,m.Cb)({type:Boolean})],F.prototype,"_payIsLoadingVal",void 0),M([(0,m.Cb)({type:Boolean})],F.prototype,"_getFeeIsLoadingVal",void 0),F=M([(0,m.Mo)("activation-form")],F);var z=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r};let U=class extends v.oi{constructor(e){super(),this.title="",this.title=null==e?void 0:e.title}render(){return v.dy`
      <header class="p-4 w-full shadow-xl bg-white fixed top-0 left-0 right-0 z-10">
        <div class="flex">
          <div class="w-1/3 relative">
            <img src="${$.IMAGES.akwaabaLogo}" class="absolute inset-0 h-8 w-auto object-contain object-center">
          </div>
          <div class="w-2/3 pl-4">
            <h1 class="font-bold text-gray-700 uppercase">
              ${this.title}
            </h1>
          </div>
        </div>
      </header>
    `}createRenderRoot(){return this}};z([(0,m.Cb)({type:String})],U.prototype,"title",void 0),U=z([(0,m.Mo)("app-header")],U);let G=class extends v.oi{constructor(){super()}render(){return v.dy`
      <footer class="py-2.5 px-4 w-full shadow-xl border bg-white fixed bottom-0 left-0 right-0">
        <div class="absolute right-4 bottom-16">
          <a href="https://api.whatsapp.com/send?phone=+233206007255&text="
            class="inline-block px-4 py-2 text-white bg-green-500 shadow rounded border
            text-xs uppercase tracking-wide"> <i class="fa fa-whatsapp"></i> Whatsapp Us
          </a>
        </div>
        <div class="block">
          <div class="text-center w-full">
            <a href="${$.URLS.PUBLIC_BASE_URL}" target="_blank"
              class="text-yellow-600 text-xs uppercase font-semibold tracking-wide">
              AKWAABA &copy; ${(new Date).getFullYear()}
            </a>
          </div>
          <div class="text-center w-full">
            <a href="${$.URLS.CLICK_COM_BASE_URL}" target="_blank"
              class="text-yellow-600 text-xs uppercase font-normal tracking-wide">
              Powered by Click Communications Ltd
            </a>
          </div>
        </div>
      </footer>
    `}createRenderRoot(){return this}};G=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r}([(0,m.Mo)("app-footer2")],G);var V=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r};let H=class extends v.oi{constructor(){var e;super(),this.clientID=0,this.clientInfo=null,this.clientID=Number(null===(e=$.HTTPS.GET.get("client"))||void 0===e?void 0:e.value),console.log({"this.clientID":isNaN(this.clientID)}),isNaN(this.clientID)||function(e){return t=this,i=void 0,n=function*(){let t=null;try{const i=yield _($.URLS.GET_CLIENT_INFO+"?client_id="+e);if(!0===i.error){let e={error:{error:i.msg}};t=e}else{const e=i.data;console.log({DATAS:e}),e.forEach((e=>{let i=[];e.subscriptionDurations.forEach((e=>{i.push({id:e.id,name:e.info})}));const o=e.membershipSize,n={id:o.id,name:o.info},s=e.accountType,r={id:s.id,name:s.info};let l={name:e.name,image:e.image,clientId:e.clientId,isSpecial:e.isSpecial,accountType:r,membershipSize:n,subscriptionDurations:i};t=l}))}}catch(e){return console.error({error:e}),{error:{error:$.ERROR_MSG}}}return t},new((o=void 0)||(o=Promise))((function(e,s){function r(e){try{c(n.next(e))}catch(e){s(e)}}function l(e){try{c(n.throw(e))}catch(e){s(e)}}function c(t){var i;t.done?e(t.value):(i=t.value,i instanceof o?i:new o((function(e){e(i)}))).then(r,l)}c((n=n.apply(t,i||[])).next())}));var t,i,o,n}(this.clientID).then((e=>{this.clientInfo=e}))}render(){return isNaN(this.clientID)||0===this.clientID?(console.log({"this.clientID":this.clientID}),v.dy`
        <app-header title="Account Renewal"></app-header>
        <main class="mt-14 mb-28 p-4 pb-48 h-screen">
          <div class="mt-4">
            <client-not-found></client-not-found>
          </div>
        </main>
        <app-footer2></app-footer2>
      `):v.dy`
        <app-header title="Account Renewal"></app-header>
        <main class="mt-14 mb-28 p-4 pb-48 h-screen">
          <div class="mt-4">
            <client-banner .clientInfo="${this.clientInfo}"></client-banner>
          </div>
          <div class="mt-4">
            <activation-form .clientInfo="${this.clientInfo}"></activation-form>
          </div>
        </main>
        <app-footer2></app-footer2>
      `}getClientInfo(){return e=this,t=void 0,o=function*(){let e=null;try{const t=yield _("/images/sample.json");if(!0===t.error){let i={error:{error:t.msg}};e=i}else t.data.forEach((t=>{let i=[];t.subscriptionDurations.forEach((e=>{i.push({id:e.id,name:e.name})}));let o={name:t.name,image:t.image,isSpecial:t.isSpecial,accountType:t.accountType,membershipSize:t.membershipSize,subscriptionDurations:i};e=o}))}catch(e){console.error({error:e})}return this.clientInfo=e,e},new((i=void 0)||(i=Promise))((function(n,s){function r(e){try{c(o.next(e))}catch(e){s(e)}}function l(e){try{c(o.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,l)}c((o=o.apply(e,t||[])).next())}));var e,t,i,o}createRenderRoot(){return this}};V([(0,m.Cb)({type:Number})],H.prototype,"clientID",void 0),V([(0,m.Cb)({type:Object})],H.prototype,"clientInfo",void 0),H=V([(0,m.Mo)("app-view")],H);let q=class extends v.oi{render(){return v.dy`
      <div class="antialiased text-gray-900 bg-gray-50">
        ${new H}
      </div>
    `}createRenderRoot(){return this}};q=function(e,t,i,o){var n,s=arguments.length,r=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,o);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(r=(s<3?n(r):s>3?n(t,i,r):n(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r}([(0,m.Mo)("akwaaba-app-general-account-activation")],q)}},e=>(e.O(0,[216,712],(()=>(954,e(e.s=954)))),e.O())])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,