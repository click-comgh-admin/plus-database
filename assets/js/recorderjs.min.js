window.AudioContext = window.AudioContext || window.webkitAudioContext;
var audioContext = new AudioContext,
    audioInput = null,
    realAudioInput = null,
    inputPoint = null,
    audioRecorder = null,
    BLOB = null,
    rafID = null,
    analyserContext = null,
    recIndex = 0;

function saveAudio() { audioRecorder.exportWAV(doneEncoding) }

function gotBuffers(buffers) { audioRecorder.exportWAV(doneEncoding) }

function doneEncoding(blob) { BLOB = blob, Recorder.setupPreview(blob, '[recording_indicator="player"]'), recIndex++ }

function toggleRecording(e) { if (e.classList.contains("recording")) audioRecorder.stop(), e.classList.remove("recording"), audioRecorder.getBuffers(gotBuffers);
    else { if (!audioRecorder) return;
        e.classList.add("recording"), audioRecorder.clear(), audioRecorder.record() } }

function convertToMono(input) { var splitter = audioContext.createChannelSplitter(2),
        merger = audioContext.createChannelMerger(2); return input.connect(splitter), splitter.connect(merger, 0, 0), splitter.connect(merger, 0, 1), merger }

function cancelAnalyserUpdates() { window.cancelAnimationFrame(rafID), rafID = null }

function toggleMono() { audioInput != realAudioInput ? (audioInput.disconnect(), realAudioInput.disconnect(), audioInput = realAudioInput) : (realAudioInput.disconnect(), audioInput = convertToMono(realAudioInput)), audioInput.connect(inputPoint) }

function gotStream(stream) { inputPoint = audioContext.createGain(), realAudioInput = audioContext.createMediaStreamSource(stream), (audioInput = realAudioInput).connect(inputPoint), analyserNode = audioContext.createAnalyser(), analyserNode.fftSize = 2048, inputPoint.connect(analyserNode), audioRecorder = new Recorder(inputPoint), zeroGain = audioContext.createGain(), zeroGain.gain.value = 0, inputPoint.connect(zeroGain), zeroGain.connect(audioContext.destination) }

function initAudio() { navigator.getUserMedia || (navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia), navigator.cancelAnimationFrame || (navigator.cancelAnimationFrame = navigator.webkitCancelAnimationFrame || navigator.mozCancelAnimationFrame), navigator.requestAnimationFrame || (navigator.requestAnimationFrame = navigator.webkitRequestAnimationFrame || navigator.mozRequestAnimationFrame), navigator.getUserMedia({ audio: { mandatory: { googEchoCancellation: "false", googAutoGainControl: "false", googNoiseSuppression: "false", googHighpassFilter: "false" }, optional: [] } }, gotStream, (function(e) { alert("Error getting audio"), console.log(e) })) }
window.addEventListener("load", initAudio);
class audio_recorder { constructor() { this.locale = new locale, this.recording_indicator_pulse = '[recording_indicator="pulse"]', this.recording_indicator_no_action = '[recording_indicator="no_action"]', this.recording_indicator_loader = '[recording_indicator="loader"]', this.bar_loader = '[bar="loader"]', this.recording_indicator_player = '[recording_indicator="player"]', this.recording_indicator = ".recording_indicator", this.record_button_main = '[record_button="main"]', this.record_button_start = '[record_button="start"]', this.record_button_stop = '[record_button="stop"]', this.form = "[make-general-posts--recorder]", this.record_button = ".record_button", this.fileUrl = null }
    actions() { const $this = this;
        $this.locale._s($this.record_button_main, (function(rec_btn_main) { rec_btn_main.addEventListener("click", (function(e) { e.preventDefault(), toggleRecording(rec_btn_main), rec_btn_main.classList.contains("recording") ? ($this.locale._s($this.record_button_start, (function(rec_btn_start) { rec_btn_start.classList.remove("show") })), $this.locale._s($this.record_button_stop, (function(rec_btn_stop) { rec_btn_stop.classList.add("show") })), $this.locale._s($this.recording_indicator_pulse, (function(pulse_btn) { pulse_btn.classList.add("show") })), $this.locale._s($this.recording_indicator_no_action, (function(no_action_btn) { no_action_btn.classList.remove("show") })), $this.locale._s($this.recording_indicator_player, (function(player_btn) { player_btn.classList.remove("show") }))) : ($this.locale._s($this.record_button_start, (function(rec_btn_start) { rec_btn_start.classList.add("show") })), $this.locale._s($this.record_button_stop, (function(rec_btn_stop) { rec_btn_stop.classList.remove("show") })), $this.locale._s($this.recording_indicator_pulse, (function(pulse_btn) { pulse_btn.classList.remove("show") })), $this.locale._s($this.recording_indicator_no_action, (function(no_action_btn) { no_action_btn.classList.remove("show") })), $this.locale._s($this.recording_indicator_player, (function(player_btn) { player_btn.classList.add("show") }))) }), !1) })) }
    make_url_alt() { const $this = this; try { $this.locale._s($this.recording_indicator_player, (function(player_btn) { let url = (window.URL || window.webkitURL).createObjectURL(BLOB);
                player_btn.src = url + "?r=" + rand })) } catch (e) { console.log(e) } }
    make_url() { const $this = this; try { $this.locale._s($this.recording_indicator_player, (function(player_btn) { let rand = 10 * Math.random(1, 999);
                player_btn.src = $this.fileUrl + "?r=" + rand })) } catch (e) { console.log(e) } }
    submit() { const $this = this;
        $this.locale._s($this.form, (function(form) { console.log(form), form.addEventListener("submit", (function(fE) { if (fE.preventDefault(), null == BLOB) { let confirm_msg = form.attributes["make-general-posts--recorder"].value,
                        formData = new FormData(form);
                    formData.append("fn", 99 * Math.random(1, 99)), formData.append("voice_audio", BLOB), $this.locale.submit_form_data($this.form, formData, confirm_msg = confirm_msg) } else Swal.fire({ title: "<i>Please Make a Recording Before Sending</i>", type: "warning", focusConfirm: !1 }) })) })) } }
const aR = new audio_recorder;
aR.actions(), aR.submit();