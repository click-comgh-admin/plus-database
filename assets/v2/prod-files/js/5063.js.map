{"version":3,"file":"../../../client_dashboard/assets/v2/prod-files/js/5063.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/interfaces/clients/account_category/index.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/client/index.ts","webpack://webpackNumbers/./src/addons/interfaces/location/country_model/index.ts","webpack://webpackNumbers/./src/addons/interfaces/members/user/model/index.ts","webpack://webpackNumbers/./src/addons/widgets/profile_photo/index.ts"],"sourcesContent":["// To parse this data:\n//\n//   import { Convert, ClientAccountCategoryModel } from \"./file\";\n//\n//   const clientAccountCategoryModel = Convert.toClientAccountCategoryModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface ClientAccountCategoryModel {\n  id?: number;\n  clientID?: number;\n  category?: string;\n  createdBy?: number;\n  updatedBy?: number;\n  updateDate?: Date;\n  date?: Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toClientAccountCategoryModel(json: string): ClientAccountCategoryModel {\n    return cast(JSON.parse(json), r(\"ClientAccountCategoryModel\"));\n  }\n\n  public static clientAccountCategoryModelToJson(value: ClientAccountCategoryModel): string {\n    return JSON.stringify(uncast(value, r(\"ClientAccountCategoryModel\")), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n  if (key) {\n    console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n  }\n  console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) { }\n    }\n    return invalidValue(typs, val);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(cases, val);\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(\"array\", val);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(\"Date\", val);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n      return invalidValue(\"object\", val);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key);\n      }\n    });\n    return result;\n  }\n\n  if (typ === \"any\") return val;\n  if (typ === null) {\n    if (val === null) return val;\n  }\n  if (typ === false) return;\n  while (typeof typ === \"object\" && typ.ref !== undefined) {\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === \"object\") {\n    return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n        : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n          : invalidValue(typ, val);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== \"number\") return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  // @ts-ignore\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nexport const typeMap: any = {\n  \"ClientAccountCategoryModel\": o([\n    { json: \"id\", js: \"id\", typ: u(null, 0) },\n    { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n    { json: \"category\", js: \"category\", typ: u(null, \"\") },\n    { json: \"createdBy\", js: \"createdBy\", typ: u(null, 0) },\n    { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n    { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n    { json: \"date\", js: \"date\", typ: u(null, Date) },\n  ], false),\n};\n","// To parse this data:\n//\n//   import { Convert, ClientInfoModel } from \"./file\";\n//\n//   const clientInfoModel = Convert.toClientInfoModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nimport { LocationCountryModel, typeMap as cmTypeMap } from \"@@addons/interfaces/location/country_model\";\nimport { ClientAccountCategoryModel, typeMap as cacmTypeMap } from \"@@addons/interfaces/clients/account_category\";\n\nexport interface ClientInfoModel {\n    id?: number;\n    name?: string;\n    accountType?: number;\n    country?: string;\n    stateProvince?: string;\n    applicantFirstname?: string;\n    applicantSurname?: string;\n    applicantGender?: number;\n    applicantPhone?: string;\n    applicantEmail?: string;\n    applicantDesignationRole?: number;\n    region?: number;\n    district?: number;\n    constituency?: number;\n    community?: string;\n    subscriptionDuration?: string;\n    subscriptionDate?: Date;\n    subscriptionFee?: string;\n    logo?: string;\n    status?: number;\n    archive?: number;\n    accountCategory?: ClientAccountCategoryModel;\n    website?: null;\n    creationDate?: Date;\n    updatedBy?: number;\n    updateDate?: Date;\n    countryInfo?: LocationCountryModel[];\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toClientInfoModel(json: string): ClientInfoModel {\n        return cast(JSON.parse(json), r(\"ClientInfoModel\"));\n    }\n\n    public static clientInfoModelToJson(value: ClientInfoModel): string {\n        return JSON.stringify(uncast(value, r(\"ClientInfoModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) { }\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n                : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n                    : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"ClientInfoModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"name\", js: \"name\", typ: u(null, \"\") },\n        { json: \"accountType\", js: \"accountType\", typ: u(null, 0) },\n        { json: \"country\", js: \"country\", typ: u(null, \"\") },\n        { json: \"stateProvince\", js: \"stateProvince\", typ: u(null, \"\") },\n        { json: \"applicantFirstname\", js: \"applicantFirstname\", typ: u(null, \"\") },\n        { json: \"applicantSurname\", js: \"applicantSurname\", typ: u(null, \"\") },\n        { json: \"applicantGender\", js: \"applicantGender\", typ: u(null, 0) },\n        { json: \"applicantPhone\", js: \"applicantPhone\", typ: u(null, \"\") },\n        { json: \"applicantEmail\", js: \"applicantEmail\", typ: u(null, \"\") },\n        { json: \"applicantDesignationRole\", js: \"applicantDesignationRole\", typ: u(null, 0) },\n        { json: \"region\", js: \"region\", typ: u(null, 0) },\n        { json: \"district\", js: \"district\", typ: u(null, 0) },\n        { json: \"constituency\", js: \"constituency\", typ: u(null, 0) },\n        { json: \"community\", js: \"community\", typ: u(null, \"\") },\n        { json: \"subscriptionDuration\", js: \"subscriptionDuration\", typ: u(null, \"\") },\n        { json: \"subscriptionDate\", js: \"subscriptionDate\", typ: u(null, Date) },\n        { json: \"subscriptionFee\", js: \"subscriptionFee\", typ: u(null, \"\") },\n        { json: \"logo\", js: \"logo\", typ: u(null, \"\") },\n        { json: \"status\", js: \"status\", typ: u(null, 0) },\n        { json: \"archive\", js: \"archive\", typ: u(null, 0) },\n        { json: \"accountCategory\", js: \"accountCategory\", typ: u(null, r(\"ClientAccountCategoryModel\")) },\n        { json: \"website\", js: \"website\", typ: u(null, null) },\n        { json: \"creationDate\", js: \"creationDate\", typ: u(null, Date) },\n        { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n        { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n        { json: \"countryInfo\", js: \"countryInfo\", typ: u(null, a(r(\"LocationCountryModel\"))) },\n    ], false),\n    \"LocationCountryModel\": cmTypeMap['LocationCountryModel'],\n    \"ClientAccountCategoryModel\": cacmTypeMap['ClientAccountCategoryModel'],\n};\n","// To parse this data:\n//\n//   import { Convert, LocationCountryModel } from \"./file\";\n//\n//   const countryModel = Convert.toCountryModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface LocationCountryModel {\n  id: number;\n  name: string;\n  short: string;\n  code: string;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toCountryModel(json: string): LocationCountryModel {\n    return cast(JSON.parse(json), r(\"LocationCountryModel\"));\n  }\n\n  public static countryModelToJson(value: LocationCountryModel): string {\n    return JSON.stringify(uncast(value, r(\"LocationCountryModel\")), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = ''): never {\n  if (key) {\n    throw Error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n  }\n  throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) { }\n    }\n    return invalidValue(typs, val);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(cases, val);\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(\"array\", val);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(\"Date\", val);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n      return invalidValue(\"object\", val);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key);\n      }\n    });\n    return result;\n  }\n\n  if (typ === \"any\") return val;\n  if (typ === null) {\n    if (val === null) return val;\n    return invalidValue(typ, val);\n  }\n  if (typ === false) return invalidValue(typ, val);\n  while (typeof typ === \"object\" && typ.ref !== undefined) {\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === \"object\") {\n    return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n        : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n          : invalidValue(typ, val);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== \"number\") return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  //@ts-ignore\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nexport const typeMap: any = {\n  \"LocationCountryModel\": o([\n    { json: \"id\", js: \"id\", typ: 0 },\n    { json: \"name\", js: \"name\", typ: \"\" },\n    { json: \"short\", js: \"short\", typ: \"\" },\n    { json: \"code\", js: \"code\", typ: \"\" },\n  ], false),\n};\n","// To parse this data:\n//\n//   import { Convert, MembershipUserModel } from \"./file\";\n//\n//   const membershipUserAltI = Convert.toMembershipUserModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface MembershipUserModel {\n  id?: number;\n  clientId?: number;\n  firstname?: string;\n  middlename?: null | string;\n  surname?: string;\n  gender?: number;\n  profilePicture?: string;\n  phone?: string;\n  email?: string;\n  dateOfBirth?: Date;\n  religion?: number;\n  nationality?: string;\n  countryOfResidence?: string;\n  stateProvince?: string;\n  region?: number;\n  district?: number;\n  constituency?: number;\n  electoralArea?: number;\n  community?: string;\n  hometown?: string;\n  houseNoDigitalAddress?: string;\n  digitalAddress?: string;\n  level?: number;\n  status?: number;\n  accountType?: number;\n  memberType?: number;\n  date?: Date;\n  last_login?: Date;\n  referenceId?: string;\n  branchId?: number;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toMembershipUserModel(json: string): MembershipUserModel {\n    return cast(JSON.parse(json), r(\"MembershipUserModel\"));\n  }\n\n  public static membershipUserAltIToJson(value: MembershipUserModel): string {\n    return JSON.stringify(uncast(value, r(\"MembershipUserModel\")), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n  if (key) {\n    console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    // throw Error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n  }\n  console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n  // throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) { }\n    }\n    return invalidValue(typs, val);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(cases, val);\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(\"array\", val);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(\"Date\", val);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n      return invalidValue(\"object\", val);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key);\n      }\n    });\n    return result;\n  }\n\n  console.log({key, val, typ});\n  \n\n  if (typ === \"any\") return val;\n  if (typ === null) {\n    if (val === null) return val;\n    // return invalidValue(typ, val);\n  }\n  if (typ === false) return invalidValue(typ, val);\n  while (typeof typ === \"object\" && typ.ref !== undefined) {\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === \"object\") {\n    return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n        : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n          : invalidValue(typ, val);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== \"number\") return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  //@ts-ignore\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nexport const typeMap: any = {\n  \"MembershipUserModel\": o([\n    { json: \"id\", js: \"id\", typ: 0 },\n    { json: \"clientId\", js: \"clientId\", typ: 0 },\n    { json: \"firstname\", js: \"firstname\", typ: \"\" },\n    { json: \"middlename\", js: \"middlename\", typ: u(null, \"\") },\n    { json: \"surname\", js: \"surname\", typ: \"\" },\n    { json: \"gender\", js: \"gender\", typ: 0 },\n    { json: \"profilePicture\", js: \"profilePicture\", typ: \"\" },\n    { json: \"phone\", js: \"phone\", typ: \"\" },\n    { json: \"email\", js: \"email\", typ: \"\" },\n    { json: \"dateOfBirth\", js: \"dateOfBirth\", typ: Date },\n    { json: \"religion\", js: \"religion\", typ: 0 },\n    { json: \"nationality\", js: \"nationality\", typ: \"\" },\n    { json: \"countryOfResidence\", js: \"countryOfResidence\", typ: \"\" },\n    { json: \"stateProvince\", js: \"stateProvince\", typ: \"\" },\n    { json: \"region\", js: \"region\", typ: 0 },\n    { json: \"district\", js: \"district\", typ: 0 },\n    { json: \"constituency\", js: \"constituency\", typ: 0 },\n    { json: \"electoralArea\", js: \"electoralArea\", typ: 0 },\n    { json: \"community\", js: \"community\", typ: \"\" },\n    { json: \"hometown\", js: \"hometown\", typ: \"\" },\n    { json: \"houseNoDigitalAddress\", js: \"houseNoDigitalAddress\", typ: \"\" },\n    { json: \"digitalAddress\", js: \"digitalAddress\", typ: \"\" },\n    { json: \"level\", js: \"level\", typ: 0 },\n    { json: \"status\", js: \"status\", typ: 0 },\n    { json: \"accountType\", js: \"accountType\", typ: 0 },\n    { json: \"memberType\", js: \"memberType\", typ: 0 },\n    { json: \"date\", js: \"date\", typ: Date },\n    { json: \"last_login\", js: \"last_login\", typ: Date },\n    { json: \"referenceId\", js: \"referenceId\", typ: \"\" },\n    { json: \"branchId\", js: \"branchId\", typ: 0 },\n  ], false),\n};\n","import { CONSTANTS } from '@@addons/constants';\r\nimport { LitElement, html, css } from 'lit';\r\nimport { customElement, property, query, queryAll } from 'lit/decorators.js'\r\n\r\n\r\n@customElement('user-profile-photo')\r\nexport class UserProfilePhoto extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: String })\r\n  public url?: string;\r\n\r\n  @property({ type: String })\r\n  public type?: \"member\" | \"client\";\r\n\r\n  @property({ type: Boolean })\r\n  public rounded?: boolean;\r\n\r\n  /** URL TO OPEN ON CLICK*/\r\n  @property({ type: String })\r\n  public 'click-to-open'?: 'false' | string = 'false';\r\n\r\n  @property({ type: Number })\r\n  public size?: 16 | 32;\r\n\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    // console.log({ \"this['click-to-open']\": this['click-to-open'] });\r\n\r\n\r\n    if (this.type === \"client\") {\r\n      this.setUpClientImage();\r\n    } else {\r\n      this.setUpMemberImage();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    return html`\r\n      <div @click=\"${this.openProfile}\"\r\n        class=\"h-${this.size} w-${this.size} items-center justify-center border-2 border-yellow-500 ${this.rounded ? 'rounded-full' : ''}\">\r\n        <img class=\"object-cover h-full w-full border-2 border-akwaaba-orange-light ${this.rounded ? 'rounded-full' : ''}\"\r\n          src=\"${this.url}\">\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private openProfile(event: any) {\r\n    event.preventDefault();\r\n\r\n    if (this['click-to-open'] !== \"false\") {\r\n      window.location.href = this['click-to-open'];\r\n    }\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  private setUpMemberImage() {\r\n    if (this.url.includes(\"member/logo/\") || this.url.includes(\"member/profile/\")) {\r\n      this.url = this.url;\r\n    } else {\r\n      const parts = this.url.split('/');\r\n      const fileName = parts[parts.length - 1];\r\n      this.url = CONSTANTS.URLS.FILE_BUCKET_BASE_URL + \"/files/members/profile-picture/\" + fileName;\r\n    }\r\n  }\r\n\r\n  private setUpClientImage() {\r\n    if (this.url.includes(\"clients/profile-picture/\")) {\r\n      this.url = this.url;\r\n    } else {\r\n      const parts = this.url.split('/');\r\n      const fileName = parts[parts.length - 1];\r\n      this.url = CONSTANTS.URLS.FILE_BUCKET_BASE_URL + \"/files/clients/profile-picture/\" + fileName;\r\n    }\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["Convert","static","json","transform","JSON","parse","r","jsonToJSProps","value","stringify","jsToJSONProps","invalidValue","typ","val","key","console","error","undefined","jsonToJS","map","props","forEach","p","js","jsToJSON","getProps","ref","typeMap","Array","isArray","cases","indexOf","transformEnum","hasOwnProperty","typs","l","length","i","_","transformUnion","unionMembers","el","transformArray","arrayItems","additional","result","Object","getOwnPropertyNames","prop","v","prototype","call","transformObject","Date","d","isNaN","valueOf","transformDate","transformPrimitive","u","name","Error","UserProfilePhoto","constructor","super","connectedCallback","this","type","setUpClientImage","setUpMemberImage","disconnectedCallback","render","openProfile","size","rounded","url","event","preventDefault","window","location","href","firstUpdated","includes","parts","split","fileName","createRenderRoot","styles","String","Boolean","Number"],"sourceRoot":""}