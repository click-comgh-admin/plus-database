{"version":3,"file":"../../../client_dashboard/assets/v2/prod-files/js/6141.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/functions/url_query_params/index.ts","webpack://webpackNumbers/./src/addons/interfaces/members/groupings/member_categories/index.ts","webpack://webpackNumbers/./src/addons/interfaces/members/groupings/subgroup/index.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/group/index.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/subgroup/index.ts","webpack://webpackNumbers/./src/view/admin/user/form/group_subgroup.ts","webpack://webpackNumbers/./src/addons/network/clients/users/group_subgroup_update.ts","webpack://webpackNumbers/./src/addons/network/clients/users/group_subgroup_add.ts"],"sourcesContent":["export const urlQueryParams = () => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n\r\n  return params;\r\n}\r\nexport const urlQueryParamsGet = (query: string) => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n  let value: string = null;\r\n  for (const key in params) {\r\n    if (key === query) {\r\n      value = params[key]\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nexport const urlQueryParamsJoin = (object:{\r\n  [k: string]: string;\r\n}) => {\r\n  let urlStr: string = \"\";\r\n  let index = 0;\r\n  for (const key in object) {\r\n    index += 1; \r\n    urlStr += `${(index > 1) ? \"&\": \"\"}${key}=${object[key]}`;\r\n  }\r\n  return urlStr;\r\n}","export interface GroupingsMemberCategories_I {\r\n  id: number,\r\n  category: string,\r\n  clientId?: number,\r\n  createdBy?: number,\r\n  date?: Date,\r\n  updatedBy?: number,\r\n  updateDate?: Date,\r\n}\r\nexport function GroupingsMemberCategories_S(data: any): GroupingsMemberCategories_I {\r\n  // console.log({data});\r\n\r\n  const groupingsMemberCategories_S: GroupingsMemberCategories_I = {\r\n    id: typeof data == \"number\" ? data: Number(data['id']),\r\n    clientId: Number(data['clientId']),\r\n    category: String(data['category']),\r\n    createdBy: Number(data['createdBy']),\r\n    updatedBy: Number(data['updatedBy']),\r\n    date: new Date(data['date']),\r\n    updateDate: new Date(data['updateDate']),\r\n  };\r\n\r\n  return groupingsMemberCategories_S;\r\n}","import { GET_MemberGroupingsGroups } from \"@@addons/network/members/groupings/group\";\r\nimport { GroupingsGroup_I } from \"../group\";\r\nimport { GroupingsMemberCategories_I, GroupingsMemberCategories_S } from \"../member_categories\";\r\n\r\nexport interface GroupingsSubGroup_I {\r\n  id: number,\r\n  clientId?: number,\r\n  groupId?: number,\r\n  groupName?: string,\r\n  branchId?: number,\r\n  memberCategoryId?: GroupingsMemberCategories_I,\r\n  subgroup?: string,\r\n  createdBy?: number,\r\n  updatedBy?: number,\r\n  updateDate?: Date,\r\n  date?: Date,\r\n}\r\n\r\nexport function GroupingsSubGroup_S(data: any): GroupingsSubGroup_I {\r\n  // console.log({data});\r\n  const groupId = data['groupId'];\r\n  const groupingsSubGroup_S: GroupingsSubGroup_I = {\r\n    id: Number(data['id']),\r\n    clientId: Number(data['clientId']),\r\n    groupId: Number(groupId['id']),\r\n    groupName: String(groupId['group']),\r\n    subgroup: String(data['subgroup']),\r\n    branchId: Number(data['branchId']),\r\n    memberCategoryId: GroupingsMemberCategories_S(data['memberCategoryId']),\r\n    createdBy: Number(data['createdBy']),\r\n    updatedBy: Number(data['updatedBy']),\r\n    date: new Date(data['date']),\r\n    updateDate: new Date(data['updateDate']),\r\n  };\r\n\r\n  return groupingsSubGroup_S;\r\n}\r\n\r\n\r\nasync function getGroup(ID: number) {\r\n  const _networkResponse = await GET_MemberGroupingsGroups<GroupingsGroup_I>(ID);\r\n  if (_networkResponse === null) {\r\n    return \"???\";\r\n  } else {\r\n    if (_networkResponse.response.success && 'group' in _networkResponse.response.data) {\r\n      \r\n      const group: GroupingsGroup_I = _networkResponse.response.data;\r\n      return group.group;\r\n    } else {\r\n      let message = \"\";\r\n      let _message = _networkResponse.response.message;\r\n      if (Array.isArray(_message)) {\r\n        message = \"Unknown Error!\";\r\n      } else {\r\n        message = _message;\r\n      }\r\n      return message;\r\n    }\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_MemberGroupingsGroups<Type>(type: Number = null, url_params: string = \"\") {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/group'\r\n    + (type === null ? \"\" : \"/\" + type) + (url_params),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_MemberGroupingsSubGroups<Type>(type: Number = null, url_params: string = \"\") {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/sub-group'\r\n  + (type === null ? \"\" : \"/\" + type) + (url_params),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import '@@assets/styles/views/admin/user/form.scss';\r\nimport { LitElement, html, css } from 'lit';\r\nimport { customElement, property } from 'lit/decorators.js';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-textfield';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-tab';\r\nimport '@material/mwc-tab-bar';\r\nimport '@@addons/widgets/form/new/select';\r\nimport { getActiveBranchIdCookie } from '@@addons/functions/views/home/branch';\r\nimport { ClientBranches_I, ClientBranchShort_I } from '@@addons/interfaces/clients/branches';\r\nimport { NetworkCallResponse_I } from '@@addons/interfaces/network_calls/response';\r\nimport { GET_ClientBranches } from '@@addons/network/clients/branches';\r\nimport { getUserLoginInfoCookie } from '@@addons/functions/login';\r\nimport { UserLoginInfo_I } from '@@addons/interfaces/network_calls/login';\r\nimport { ClientUsers_I } from '@@addons/interfaces/clients/users';\r\nimport { ClientUserGroupSubgroup_I } from '@@addons/interfaces/clients/users/group_subgroup';\r\nimport { GroupingsGroup_I } from '@@addons/interfaces/members/groupings/group';\r\nimport { GroupingsSubGroup_I, GroupingsSubGroup_S } from '@@addons/interfaces/members/groupings/subgroup';\r\nimport { GET_MemberGroupingsGroups } from '@@addons/network/members/groupings/group';\r\nimport { GET_MemberGroupingsSubGroups } from '@@addons/network/members/groupings/subgroup';\r\nimport { POST_ClientUserGroupSubgroup } from '@@addons/network/clients/users/group_subgroup_add';\r\nimport { PUT_ClientUserGroupSubgroup } from '@@addons/network/clients/users/group_subgroup_update';\r\n\r\n\r\ntype groupSubgroupType = { id: number; name: string; isSelected: \"true\" | \"false\"; selected: boolean; };\r\n@customElement(\"pdb-admin-user-group-subgroup-form\")\r\nexport class PdbAdminUserGroupSubgroupForm extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  public userId?: number = 0;\r\n\r\n  @property({ type: String })\r\n  public edit: \"true\" | \"false\" = \"false\";\r\n\r\n  @property({ type: Boolean })\r\n  public editAccess?: boolean = false;\r\n\r\n  @property({ type: Boolean })\r\n  public isEditable?: boolean = false;\r\n\r\n  @property({ type: String })\r\n  public page_type: \"mine\" | \"not-mine\" = \"mine\";\r\n\r\n  @property({ type: Array })\r\n  private _branches: ClientBranches_I[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _groups: GroupingsGroup_I[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _subgroups: GroupingsSubGroup_I[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _activeBranchId?: ClientBranchShort_I[] = null;\r\n\r\n  @property({ type: Array })\r\n  private _userLoginInfo?: UserLoginInfo_I[] = null;\r\n\r\n  private get _clientUserDefault(): NetworkCallResponse_I<ClientUsers_I> {\r\n    const user: ClientUsers_I = {};\r\n    return { data: user, message: \"\", success: false }\r\n  }\r\n\r\n  private _clientUser: NetworkCallResponse_I<ClientUsers_I> = this._clientUserDefault;\r\n\r\n  public set clientUser(value: NetworkCallResponse_I<ClientUsers_I>) {\r\n    this._clientUser = value;\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public get clientUser(): NetworkCallResponse_I<ClientUsers_I> {\r\n    return this._clientUser;\r\n  }\r\n\r\n  private get _clientUserGroupSubgroupDefault(): NetworkCallResponse_I<ClientUserGroupSubgroup_I> {\r\n    const groupSubgroup: ClientUserGroupSubgroup_I = {};\r\n    return { data: groupSubgroup, message: \"\", success: false }\r\n  }\r\n\r\n  private _clientUserGroupSubgroup: NetworkCallResponse_I<ClientUserGroupSubgroup_I> = this._clientUserGroupSubgroupDefault;\r\n\r\n  public set clientUserGroupSubgroup(value: NetworkCallResponse_I<ClientUserGroupSubgroup_I>) {\r\n    this._clientUserGroupSubgroup = value;\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public get clientUserGroupSubgroup(): NetworkCallResponse_I<ClientUserGroupSubgroup_I> {\r\n    return this._clientUserGroupSubgroup;\r\n  }\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n    const activeBranchId = getActiveBranchIdCookie();\r\n    this._activeBranchId = (activeBranchId === null) ? null : [activeBranchId];\r\n    this._userLoginInfo = [getUserLoginInfoCookie()];\r\n\r\n    await this.getBranches();\r\n    await this.getGroups();\r\n    await this.getSubGroups();\r\n\r\n    // console.log({\"clientUser\": this.clientUser});\r\n    // console.log({\"clientUserGroupSubgroup\": this.clientUserGroupSubgroup});\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    if (this.edit === \"true\") {\r\n      if (this.page_type === \"mine\") {\r\n        this.isEditable = true;\r\n      } else {\r\n        if (this.editAccess) {\r\n          this.isEditable = true;\r\n        } else {\r\n          this.isEditable = false;\r\n        }\r\n      }\r\n      return html`\r\n        ${this.groupSubgroup}\r\n      `;\r\n    } else {\r\n      return html`\r\n        ${this.form}\r\n      `;\r\n    }\r\n  }\r\n\r\n  private get groupSubgroup() {\r\n    let clientId = 0;\r\n    if (this._activeBranchId !== null) {\r\n      clientId = this._activeBranchId[0].accountId;\r\n    }\r\n\r\n    return html`\r\n      <div class=\"form-container flex justify-center\">\r\n        <div class=\"app-container- !px-0\">\r\n          <div class=\"app-container--row !px-0\">\r\n            <div class=\"app-container--col-md-12\">\r\n              <header class=\"header warning app-container--col-md-12\">\r\n                <label for=\"\" class=\"label\">\r\n                  <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                  <h1 class=\"h1 !text-red-400\">Admin User Group(s)/ Sub-Group(s)</h1>\r\n                  <h3 class=\"h3\">Update Admin User Group(s)/ Sub-Group(s)!</h3>\r\n                </label>\r\n              </header>\r\n              <form method=\"post\" action=\"#\" class=\"form\" make-general-posts=\"client-user-group-subgroup\" enctype=\"multipart/form-data\">\r\n                <div class=\"row justify-content-center\">\r\n                  ${this.accessFieldSelectBox}\r\n                  <div class=\"col-md-12 col-lg-8\">\r\n                    <input type=\"hidden\" name=\"clientId\" id=\"clientId\" value=\"${clientId}\" />\r\n                    <input type=\"hidden\" name=\"userId\" id=\"userId\" value=\"${this.userId}\" />\r\n                    <div class=\"form-input-container\">\r\n                      <mwc-button label=\"Update Group(s)/ Subgroup(s)\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                      </mwc-button>\r\n                    </div>\r\n      \r\n                    <div class=\"flex form-input-container items-center text-center\">\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                      <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                        Lets go digital...\r\n                      </label>\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get form() {\r\n\r\n    let clientId = 0;\r\n    if (this._activeBranchId !== null) {\r\n      clientId = this._activeBranchId[0].accountId;\r\n    }\r\n\r\n    return html`\r\n      <div class=\"form-container flex justify-center\">\r\n        <div class=\"app-container- !px-0\">\r\n          <div class=\"app-container--row !px-0\">\r\n            <div class=\"app-container--col-md-12\">\r\n              <header class=\"header warning app-container--col-md-12\">\r\n                <label for=\"\" class=\"label\">\r\n                  <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                  <h1 class=\"h1 !text-red-400\">Admin User Group(s)/ Sub-Group(s)</h1>\r\n                  <h3 class=\"h3\">Add Admin User Group(s)/ Sub-Group(s)!</h3>\r\n                </label>\r\n              </header>\r\n              <form method=\"post\" action=\"#\" class=\"form\" make-general-posts=\"client-user-group-subgroup\"\r\n                enctype=\"multipart/form-data\">\r\n                <div class=\"row justify-content-center\">\r\n      \r\n                  ${this.accessFieldSelectBox}\r\n                  <div class=\"col-md-12 col-lg-8\">\r\n                    <input type=\"hidden\" name=\"clientId\" id=\"clientId\" value=\"${clientId}\" />\r\n                    <input type=\"hidden\" name=\"userId\" id=\"userId\" value=\"${this.userId}\" />\r\n                    <div class=\"form-input-container\">\r\n                      <mwc-button label=\"Add Group(s)/ Sub-Group(s)\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                      </mwc-button>\r\n                    </div>\r\n      \r\n                    <div class=\"flex form-input-container items-center text-center\">\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                      <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                        Lets go digital...\r\n                      </label>\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get groupsSubgroups() {\r\n    type returnType = { groups: groupSubgroupType[], subgroups: groupSubgroupType[] };\r\n    let groups: groupSubgroupType[] = [];\r\n    let subgroups: groupSubgroupType[] = [];\r\n\r\n    const clientUserGroupSubgroup = this.clientUserGroupSubgroup,\r\n      _data = clientUserGroupSubgroup.data,\r\n      DATA = Array.isArray(_data) ? _data[0] : _data,\r\n      SUCCESS = clientUserGroupSubgroup.success;\r\n\r\n    this._groups.forEach(_group => {\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      if (SUCCESS) {\r\n        DATA.group.forEach(group => {\r\n          if (group.id === _group.id) {\r\n            isSelected = true;\r\n            isSelectedAlt = \"true\";\r\n          }\r\n        });\r\n      }\r\n      const group: groupSubgroupType = {\r\n        id: _group.id, name: _group.group, isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!groups.includes(group)) {\r\n        groups.push(group);\r\n      }\r\n    });\r\n\r\n    // console.log({\"this._subgroups\": this._subgroups})\r\n    this._subgroups.forEach(_subgroup => {\r\n      _subgroup = GroupingsSubGroup_S(_subgroup);\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      if (SUCCESS) {\r\n        DATA.subgroup.forEach(subgroup => {\r\n          if (subgroup.id === _subgroup.id) {\r\n            isSelected = true;\r\n            isSelectedAlt = \"true\";\r\n          }\r\n        });\r\n      }\r\n      const subgroup: groupSubgroupType = {\r\n        id: _subgroup.id, name: `${_subgroup.groupName} => ${_subgroup.subgroup}`,\r\n        isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!subgroups.includes(subgroup)) {\r\n        subgroups.push(subgroup);\r\n      }\r\n    });\r\n\r\n    const _returnType: returnType = {\r\n      groups: groups, subgroups: subgroups,\r\n    }\r\n    return _returnType;\r\n  }\r\n\r\n  private get accessFieldSelectBox() {\r\n    const groupsSubgroups = this.groupsSubgroups,\r\n      groups = groupsSubgroups.groups,\r\n      subgroups = groupsSubgroups.subgroups;\r\n\r\n    return html`\r\n      <div class=\"col-md-6 col-lg-4\">\r\n        <h4 class=\"font-semibold my-2\">Select User Group(s)</h4>\r\n        <select-input name=\"group\" multiple class=\"w-full\" id=\"group\" label=\"Select User Group(s)\" .options=\"${groups}\"\r\n          outlined required>\r\n        </select-input>\r\n      </div>\r\n      <div class=\"col-md-6 col-lg-4\">\r\n        <h4 class=\"font-semibold my-2\">Select User Sub-Group(s)</h4>\r\n        <select-input name=\"subgroup\" multiple class=\"w-full\" id=\"subgroup\" label=\"Select User Sub-Group(s)\"\r\n          .options=\"${subgroups}\" outlined required>\r\n        </select-input>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  private async getBranches() {\r\n    const _networkResponse = await GET_ClientBranches<ClientBranches_I>();\r\n    let __branches: ClientBranches_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __branches.push({ id: 0, name: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: ClientBranches_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __branches = DATA;\r\n      }\r\n    }\r\n    this._branches = [...this._branches, ...__branches];\r\n  }\r\n\r\n  private async getGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsGroups<GroupingsGroup_I>();\r\n    let __groups: GroupingsGroup_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __groups.push({ id: 0, group: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: GroupingsGroup_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __groups = DATA;\r\n      }\r\n    }\r\n    this._groups = [...this._groups, ...__groups];\r\n  }\r\n\r\n  private async getGroup(ID: number) {\r\n    const _networkResponse = await GET_MemberGroupingsGroups<GroupingsGroup_I>(ID);\r\n    if (_networkResponse === null) {\r\n      return \"???\";\r\n    } else {\r\n      if (_networkResponse.response.success && 'group' in _networkResponse.response.data) {\r\n\r\n        const group: GroupingsGroup_I = _networkResponse.response.data;\r\n        return group.group;\r\n      } else {\r\n        let message = \"\";\r\n        let _message = _networkResponse.response.message;\r\n        if (Array.isArray(_message)) {\r\n          message = \"Unknown Error!\";\r\n        } else {\r\n          message = _message;\r\n        }\r\n        return message;\r\n      }\r\n    }\r\n  }\r\n\r\n  private async getSubGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsSubGroups<GroupingsSubGroup_I>();\r\n    let __subgroups: GroupingsSubGroup_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __subgroups.push({ id: 0, subgroup: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: GroupingsSubGroup_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __subgroups = DATA;\r\n      }\r\n    }\r\n    this._subgroups = [...this._subgroups, ...__subgroups];\r\n  }\r\n\r\n  async submitForm(e: PointerEvent) {\r\n    e.preventDefault();\r\n\r\n    if (this.edit === \"true\") {\r\n      if (this.isEditable) {\r\n        const clientUserGroupSubgroup = this.clientUserGroupSubgroup,\r\n          _data = clientUserGroupSubgroup.data,\r\n          DATA = Array.isArray(_data) ? _data[0] : _data,\r\n          SUCCESS = clientUserGroupSubgroup.success;\r\n        if (SUCCESS) {\r\n          await PUT_ClientUserGroupSubgroup(DATA.id);\r\n        }\r\n      }\r\n    } else {\r\n      await POST_ClientUserGroupSubgroup();\r\n    }\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function PUT_ClientUserGroupSubgroup(ID: Number): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user-group-subgroup/' + ID,\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user-group-subgroup\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Update user group(s)/ subgroup(s)?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n        headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_ClientUserGroupSubgroup(): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user-group-subgroup',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user-group-subgroup\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Add group(s)/ subgroup(s)?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}"],"names":["urlQueryParams","urlSearchParams","URLSearchParams","window","location","search","Object","fromEntries","entries","urlQueryParamsGet","query","params","value","key","urlQueryParamsJoin","object","urlStr","index","GroupingsMemberCategories_S","data","id","Number","clientId","category","String","createdBy","updatedBy","date","Date","updateDate","GroupingsSubGroup_S","groupId","groupName","subgroup","branchId","memberCategoryId","GET_MemberGroupingsGroups","type","url_params","_get_cookie","url","HTTP","method","headers","Authorization","token","error","console","errorHttp","GET_MemberGroupingsSubGroups","PdbAdminUserGroupSubgroupForm","constructor","super","userId","edit","editAccess","isEditable","page_type","_branches","_groups","_subgroups","_activeBranchId","_userLoginInfo","_clientUser","this","_clientUserDefault","_clientUserGroupSubgroup","_clientUserGroupSubgroupDefault","message","success","clientUser","requestUpdate","clientUserGroupSubgroup","connectedCallback","activeBranchId","getBranches","getGroups","getSubGroups","disconnectedCallback","render","groupSubgroup","form","accountId","accessFieldSelectBox","submitForm","groupsSubgroups","groups","subgroups","_data","DATA","Array","isArray","SUCCESS","forEach","_group","isSelected","isSelectedAlt","group","name","selected","includes","push","_subgroup","firstUpdated","_networkResponse","__branches","response","__groups","getGroup","ID","_message","__subgroups","e","preventDefault","formContainer","document","querySelector","formData","FormData","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","http","body","then","networkCallRes","_RESPONSE","unknownError","length","errors","err","errormsg","res","https_swal_error_format","catch","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","VALUE","setTimeout","reload","PUT_ClientUserGroupSubgroup","POST_ClientUserGroupSubgroup","createRenderRoot","styles","property","Boolean"],"sourceRoot":""}