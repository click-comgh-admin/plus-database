{"version":3,"file":"../../../client_dashboard/assets/v2/prod-files/js/7983.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/interfaces/clients/users/model/index.ts","webpack://webpackNumbers/./src/addons/interfaces/members/user/mixed/index.ts","webpack://webpackNumbers/./src/addons/interfaces/members/additional_info/index.ts","webpack://webpackNumbers/./src/addons/interfaces/attendance/absent_leave/assignment/index.ts","webpack://webpackNumbers/./src/addons/interfaces/attendance/absent_leave/status/index.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/account_category/index.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/client/index.ts","webpack://webpackNumbers/./src/addons/interfaces/location/country_model/index.ts"],"sourcesContent":["// To parse this data:\n//\n//   import { Convert, ClientUserModel } from \"./file\";\n//\n//   const clientUserModel = Convert.toClientUserModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface ClientUserModel {\n    id?:             number;\n    firstname?:      string;\n    surname?:        string;\n    gender?:         number;\n    profilePicture?: string;\n    dateOfBirth?:    Date;\n    phone?:          string;\n    email?:          string;\n    role?:           number;\n    accountID?:      number;\n    branchID?:       number;\n    level?:          number;\n    status?:         number;\n    lastUpdatedBy?:  number;\n    date?:           Date;\n    lastLogin?:      Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toClientUserModel(json: string): ClientUserModel {\n        return cast(JSON.parse(json), r(\"ClientUserModel\"));\n    }\n\n    public static clientUserModelToJson(value: ClientUserModel): string {\n        return JSON.stringify(uncast(value, r(\"ClientUserModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"ClientUserModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"firstname\", js: \"firstname\", typ: u(null, \"\") },\n        { json: \"surname\", js: \"surname\", typ: u(null, \"\") },\n        { json: \"gender\", js: \"gender\", typ: u(null, 0) },\n        { json: \"profilePicture\", js: \"profilePicture\", typ: u(null, \"\") },\n        { json: \"dateOfBirth\", js: \"dateOfBirth\", typ: u(null, Date) },\n        { json: \"phone\", js: \"phone\", typ: u(null, \"\") },\n        { json: \"email\", js: \"email\", typ: u(null, \"\") },\n        { json: \"role\", js: \"role\", typ: u(null, 0) },\n        { json: \"accountId\", js: \"accountID\", typ: u(null, 0) },\n        { json: \"branchId\", js: \"branchID\", typ: u(null, 0) },\n        { json: \"level\", js: \"level\", typ: u(null, 0) },\n        { json: \"status\", js: \"status\", typ: u(null, 0) },\n        { json: \"lastUpdatedBy\", js: \"lastUpdatedBy\", typ: u(null, 0) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n        { json: \"last_login\", js: \"lastLogin\", typ: u(null, Date) },\n    ], false),\n};\n","// To parse this data:\n//\n//   import { Convert } from \"./file\";\n//\n//   const membershipMixedUserModel = Convert.toMembershipMixedUserModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface MembershipMixedUserModel {\n    id?:                    number;\n    clientID?:              number;\n    firstname?:             string;\n    middlename?:            string;\n    surname?:               string;\n    gender?:                number;\n    profilePicture?:        string;\n    phone?:                 string;\n    email?:                 string;\n    dateOfBirth?:           Date;\n    religion?:              number;\n    nationality?:           string;\n    countryOfResidence?:    string;\n    stateProvince?:         string;\n    region?:                number;\n    district?:              number;\n    constituency?:          number;\n    electoralArea?:         number;\n    community?:             string;\n    hometown?:              string;\n    houseNoDigitalAddress?: string;\n    digitalAddress?:        string;\n    level?:                 number;\n    status?:                number;\n    accountType?:           number;\n    memberType?:            number;\n    date?:                  Date;\n    lastLogin?:             Date;\n    referenceID?:           string;\n    branchID?:              number;\n    editable?:              boolean;\n    organizationName?:      string;\n    contactPersonName?:     string;\n    organizationType?:      OrganizationType;\n    businessRegistered?:    boolean;\n    organizationPhone?:     string;\n    organizationEmail?:     string;\n    contactPersonGender?:   number;\n    contactPersonPhoto?:    string;\n    dateOfIncorporation?:   Date;\n    logo?:                  string;\n    contactPersonPhone?:    string;\n    contactPersonEmail?:    string;\n    countryOfBusiness?:     string;\n    certificates?:          Certificate[];\n}\n\nexport interface Certificate {\n    id?:         number;\n    memberID?:   number;\n    attachment?: Attachment;\n    date?:       Date;\n}\n\nexport interface Attachment {\n    id?:              number;\n    clientID?:        number;\n    attachment?:      string;\n    filename?:        string;\n    source?:          string;\n    size?:            string;\n    folderID?:        FolderID;\n    fileDescription?: string;\n    createdBy?:       number;\n    updatedBy?:       number;\n    updateDate?:      Date;\n    archived?:        boolean;\n    archivedBy?:      number;\n    archivedDate?:    Date;\n    date?:            Date;\n}\n\nexport interface FolderID {\n    id?:           number;\n    parentFolder?: null;\n    clientID?:     number;\n    branchID?:     number;\n    folder?:       string;\n    folderType?:   number;\n    createdBy?:    number;\n    updatedBy?:    number;\n    updateDate?:   Date;\n    date?:         Date;\n}\n\nexport interface OrganizationType {\n    id?:         number;\n    memberID?:   number;\n    clientID?:   number;\n    type?:       string;\n    createdBy?:  number;\n    updatedBy?:  number;\n    updateDate?: Date;\n    date?:       Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toMembershipMixedUserModel(json: string): MembershipMixedUserModel {\n        return cast(JSON.parse(json), r(\"MembershipMixedUserModel\"));\n    }\n\n    public static membershipMixedUserModelToJson(value: MembershipMixedUserModel): string {\n        return JSON.stringify(uncast(value, r(\"MembershipMixedUserModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"MembershipMixedUserModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n        { json: \"firstname\", js: \"firstname\", typ: u(null, \"\") },\n        { json: \"middlename\", js: \"middlename\", typ: u(null, \"\") },\n        { json: \"surname\", js: \"surname\", typ: u(null, \"\") },\n        { json: \"gender\", js: \"gender\", typ: u(null, 0) },\n        { json: \"profilePicture\", js: \"profilePicture\", typ: u(null, \"\") },\n        { json: \"phone\", js: \"phone\", typ: u(null, \"\") },\n        { json: \"email\", js: \"email\", typ: u(null, \"\") },\n        { json: \"dateOfBirth\", js: \"dateOfBirth\", typ: u(null, Date) },\n        { json: \"religion\", js: \"religion\", typ: u(null, 0) },\n        { json: \"nationality\", js: \"nationality\", typ: u(null, \"\") },\n        { json: \"countryOfResidence\", js: \"countryOfResidence\", typ: u(null, \"\") },\n        { json: \"stateProvince\", js: \"stateProvince\", typ: u(null, \"\") },\n        { json: \"region\", js: \"region\", typ: u(null, 0) },\n        { json: \"district\", js: \"district\", typ: u(null, 0) },\n        { json: \"constituency\", js: \"constituency\", typ: u(null, 0) },\n        { json: \"electoralArea\", js: \"electoralArea\", typ: u(null, 0) },\n        { json: \"community\", js: \"community\", typ: u(null, \"\") },\n        { json: \"hometown\", js: \"hometown\", typ: u(null, \"\") },\n        { json: \"houseNoDigitalAddress\", js: \"houseNoDigitalAddress\", typ: u(null, \"\") },\n        { json: \"digitalAddress\", js: \"digitalAddress\", typ: u(null, \"\") },\n        { json: \"level\", js: \"level\", typ: u(null, 0) },\n        { json: \"status\", js: \"status\", typ: u(null, 0) },\n        { json: \"accountType\", js: \"accountType\", typ: u(null, 0) },\n        { json: \"memberType\", js: \"memberType\", typ: u(null, 0) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n        { json: \"last_login\", js: \"lastLogin\", typ: u(null, Date) },\n        { json: \"referenceId\", js: \"referenceID\", typ: u(null, \"\") },\n        { json: \"branchId\", js: \"branchID\", typ: u(null, 0) },\n        { json: \"editable\", js: \"editable\", typ: u(null, true) },\n        { json: \"organizationName\", js: \"organizationName\", typ: u(null, \"\") },\n        { json: \"contactPersonName\", js: \"contactPersonName\", typ: u(null, \"\") },\n        { json: \"organizationType\", js: \"organizationType\", typ: u(null, r(\"OrganizationType\")) },\n        { json: \"businessRegistered\", js: \"businessRegistered\", typ: u(null, true) },\n        { json: \"organizationPhone\", js: \"organizationPhone\", typ: u(null, \"\") },\n        { json: \"organizationEmail\", js: \"organizationEmail\", typ: u(null, \"\") },\n        { json: \"contactPersonGender\", js: \"contactPersonGender\", typ: u(null, 0) },\n        { json: \"contactPersonPhoto\", js: \"contactPersonPhoto\", typ: u(null, \"\") },\n        { json: \"dateOfIncorporation\", js: \"dateOfIncorporation\", typ: u(null, Date) },\n        { json: \"logo\", js: \"logo\", typ: u(null, \"\") },\n        { json: \"contactPersonPhone\", js: \"contactPersonPhone\", typ: u(null, \"\") },\n        { json: \"contactPersonEmail\", js: \"contactPersonEmail\", typ: u(null, \"\") },\n        { json: \"countryOfBusiness\", js: \"countryOfBusiness\", typ: u(null, \"\") },\n        { json: \"certificates\", js: \"certificates\", typ: u(null, a(r(\"Certificate\"))) },\n    ], false),\n    \"Certificate\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"memberId\", js: \"memberID\", typ: u(null, 0) },\n        { json: \"attachment\", js: \"attachment\", typ: u(null, r(\"Attachment\")) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n    ], false),\n    \"Attachment\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n        { json: \"attachment\", js: \"attachment\", typ: u(null, \"\") },\n        { json: \"filename\", js: \"filename\", typ: u(null, \"\") },\n        { json: \"source\", js: \"source\", typ: u(null, \"\") },\n        { json: \"size\", js: \"size\", typ: u(null, \"\") },\n        { json: \"folderId\", js: \"folderID\", typ: u(null, r(\"FolderID\")) },\n        { json: \"fileDescription\", js: \"fileDescription\", typ: u(null, \"\") },\n        { json: \"createdBy\", js: \"createdBy\", typ: u(null, 0) },\n        { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n        { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n        { json: \"archived\", js: \"archived\", typ: u(null, true) },\n        { json: \"archivedBy\", js: \"archivedBy\", typ: u(null, 0) },\n        { json: \"archivedDate\", js: \"archivedDate\", typ: u(null, Date) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n    ], false),\n    \"FolderID\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"parentFolder\", js: \"parentFolder\", typ: u(null, null) },\n        { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n        { json: \"branchId\", js: \"branchID\", typ: u(null, 0) },\n        { json: \"folder\", js: \"folder\", typ: u(null, \"\") },\n        { json: \"folderType\", js: \"folderType\", typ: u(null, 0) },\n        { json: \"createdBy\", js: \"createdBy\", typ: u(null, 0) },\n        { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n        { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n    ], false),\n    \"OrganizationType\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"memberId\", js: \"memberID\", typ: u(null, 0) },\n        { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n        { json: \"type\", js: \"type\", typ: u(null, \"\") },\n        { json: \"createdBy\", js: \"createdBy\", typ: u(null, 0) },\n        { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n        { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n    ], false),\n};\n","// To parse this data:\n//\n//   import { Convert, MembershipAdditionalInfoModel } from \"./file\";\n//\n//   const membershipAdditionalInfoModel = Convert.toMembershipAdditionalInfoModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\nimport { MembershipMixedUserModel, typeMap as mmumTypeMap } from \"@@addons/interfaces/members/user/mixed\";\n\nexport interface MembershipAdditionalInfoModel {\n    id?:                  number;\n    memberID?:            number;\n    memberInfo?:          MembershipMixedUserModel;\n    phone?:               string;\n    email?:               string;\n    placeOfWork?:         string;\n    whatsapp?:            string;\n    facebook?:            string;\n    twitter?:             string;\n    instagram?:           string;\n    accountBio?:          string;\n    businessHashtag?:     string;\n    businessDescription?: string;\n    profession?:          string;\n    website?:             string;\n    postalAddress?:       string;\n    digitalAddress?:      string;\n    dateJoined?:          Date;\n    date?:                Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toMembershipAdditionalInfoModel(json: string): MembershipAdditionalInfoModel {\n        return cast(JSON.parse(json), r(\"MembershipAdditionalInfoModel\"));\n    }\n\n    public static membershipAdditionalInfoModelToJson(value: MembershipAdditionalInfoModel): string {\n        return JSON.stringify(uncast(value, r(\"MembershipAdditionalInfoModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"MembershipAdditionalInfoModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"memberId\", js: \"memberID\", typ: u(null, 0) },\n        { json: \"memberInfo\", js: \"memberInfo\", typ: u(null, r(\"MembershipMixedUserModel\")) },\n        { json: \"phone\", js: \"phone\", typ: u(null, \"\") },\n        { json: \"email\", js: \"email\", typ: u(null, \"\") },\n        { json: \"placeOfWork\", js: \"placeOfWork\", typ: u(null, \"\") },\n        { json: \"whatsapp\", js: \"whatsapp\", typ: u(null, \"\") },\n        { json: \"facebook\", js: \"facebook\", typ: u(null, \"\") },\n        { json: \"twitter\", js: \"twitter\", typ: u(null, \"\") },\n        { json: \"instagram\", js: \"instagram\", typ: u(null, \"\") },\n        { json: \"accountBio\", js: \"accountBio\", typ: u(null, \"\") },\n        { json: \"businessHashtag\", js: \"businessHashtag\", typ: u(null, \"\") },\n        { json: \"businessDescription\", js: \"businessDescription\", typ: u(null, \"\") },\n        { json: \"profession\", js: \"profession\", typ: u(null, \"\") },\n        { json: \"website\", js: \"website\", typ: u(null, \"\") },\n        { json: \"postalAddress\", js: \"postalAddress\", typ: u(null, \"\") },\n        { json: \"digitalAddress\", js: \"digitalAddress\", typ: u(null, \"\") },\n        { json: \"dateJoined\", js: \"dateJoined\", typ: u(null, Date) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n    ], false),\n    \"MembershipMixedUserModel\": mmumTypeMap['MembershipMixedUserModel'],\n};\n","// To parse this data:\n//\n//   import { Convert, AttendanceAbsentLeaveAssignmentModel } from \"./file\";\n//\n//   const attendanceAbsentLeaveAssignmentModel = Convert.toAttendanceAbsentLeaveAssignmentModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nimport { ClientInfoModel, typeMap as cimTypeMap } from \"@@addons/interfaces/clients/client\";\nimport { ClientUserModel, typeMap as cumTypeMap } from \"@@addons/interfaces/clients/users/model\";\nimport { MembershipAdditionalInfoModel, typeMap as maimTypeMap } from \"@@addons/interfaces/members/additional_info\";\nimport { MembershipMixedUserModel, typeMap as mmumTypeMap } from \"@@addons/interfaces/members/user/mixed\";\nimport { AttendanceAbsentLeaveStatusModel, typeMap as aalsmTypeMap } from \"../status\";\nimport { typeMap as cmTypeMap } from \"@@addons/interfaces/location/country_model\";\nimport { typeMap as cacmTypeMap } from \"@@addons/interfaces/clients/account_category\";\n\nexport interface AttendanceAbsentLeaveAssignmentModel {\n    id?:                   number;\n    clientID?:             number;\n    clientInfo?:           ClientInfoModel;\n    memberID?:             number;\n    memberInfo?:           MembershipMixedUserModel;\n    statusID?:             AttendanceAbsentLeaveStatusModel;\n    createdBy?:            number;\n    createdByInfo?:        ClientUserModel;\n    updatedBy?:            number;\n    updatedByInfo?:        ClientUserModel;\n    state?:                StateTerm;\n    term?:                 StateTerm;\n    fromDate?:             Date;\n    toDate?:               Date;\n    reason?:               string;\n    totalDays?:            number;\n    totalDaysLeft?:        number;\n    memberAdditionalInfo?: MembershipAdditionalInfoModel;\n    date?:                 Date;\n    updateDate?:           Date;\n}\n\nexport interface StateTerm {\n    id?:   number;\n    name?: string;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toAttendanceAbsentLeaveAssignmentModel(json: string): AttendanceAbsentLeaveAssignmentModel {\n        return cast(JSON.parse(json), r(\"AttendanceAbsentLeaveAssignmentModel\"));\n    }\n\n    public static attendanceAbsentLeaveAssignmentModelToJson(value: AttendanceAbsentLeaveAssignmentModel): string {\n        return JSON.stringify(uncast(value, r(\"AttendanceAbsentLeaveAssignmentModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"AttendanceAbsentLeaveAssignmentModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n        { json: \"clientInfo\", js: \"clientInfo\", typ: u(null, r(\"ClientInfoModel\")) },\n        { json: \"memberId\", js: \"memberID\", typ: u(null, 0) },\n        { json: \"memberInfo\", js: \"memberInfo\", typ: u(null, r(\"MembershipMixedUserModel\")) },\n        { json: \"statusId\", js: \"statusID\", typ: u(null, r(\"AttendanceAbsentLeaveStatusModel\")) },\n        { json: \"createdBy\", js: \"createdBy\", typ: u(null, 0) },\n        { json: \"createdByInfo\", js: \"createdByInfo\", typ: u(null, r(\"ClientUserModel\")) },\n        { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n        { json: \"updatedByInfo\", js: \"updatedByInfo\", typ: u(null, r(\"ClientUserModel\")) },\n        { json: \"state\", js: \"state\", typ: u(null, r(\"StateTerm\")) },\n        { json: \"term\", js: \"term\", typ: u(null, r(\"StateTerm\")) },\n        { json: \"fromDate\", js: \"fromDate\", typ: u(null, Date) },\n        { json: \"toDate\", js: \"toDate\", typ: u(null, Date) },\n        { json: \"reason\", js: \"reason\", typ: u(null, \"\") },\n        { json: \"totalDays\", js: \"totalDays\", typ: u(null, 0) },\n        { json: \"totalDaysLeft\", js: \"totalDaysLeft\", typ: u(null, 0) },\n        { json: \"memberAdditionalInfo\", js: \"memberAdditionalInfo\", typ: u(null, r(\"MemberAdditionalInfo\")) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n        { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n    ], false),\n    \"ClientInfoModel\": cimTypeMap['ClientInfoModel'],\n    \"MembershipMixedUserModel\": mmumTypeMap['MembershipMixedUserModel'],\n    \"AttendanceAbsentLeaveStatusModel\": aalsmTypeMap['AttendanceAbsentLeaveStatusModel'],\n    \"ClientUserModel\": cumTypeMap['ClientUserModel'],\n    \"MemberAdditionalInfo\": maimTypeMap['MemberAdditionalInfo'],\n    \"StateTerm\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"name\", js: \"name\", typ: u(null, \"\") },\n    ], false),\n    \"LocationCountryModel\": cmTypeMap['LocationCountryModel'],\n    \"ClientAccountCategoryModel\": cacmTypeMap['ClientAccountCategoryModel'],\n};\n","// To parse this data:\n//\n//   import { Convert, AttendanceAbsentLeaveStatusModel } from \"./file\";\n//\n//   const attendanceAbsentLeaveStatusModel = Convert.toAttendanceAbsentLeaveStatusModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface AttendanceAbsentLeaveStatusModel {\n    id?:       number;\n    clientID?: number;\n    branchID?: number;\n    status?:   string;\n    date?:     Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toAttendanceAbsentLeaveStatusModel(json: string): AttendanceAbsentLeaveStatusModel {\n        return cast(JSON.parse(json), r(\"AttendanceAbsentLeaveStatusModel\"));\n    }\n\n    public static attendanceAbsentLeaveStatusModelToJson(value: AttendanceAbsentLeaveStatusModel): string {\n        return JSON.stringify(uncast(value, r(\"AttendanceAbsentLeaveStatusModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"AttendanceAbsentLeaveStatusModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n        { json: \"branchId\", js: \"branchID\", typ: u(null, 0) },\n        { json: \"status\", js: \"status\", typ: u(null, \"\") },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n    ], false),\n};\n","// To parse this data:\n//\n//   import { Convert, ClientAccountCategoryModel } from \"./file\";\n//\n//   const clientAccountCategoryModel = Convert.toClientAccountCategoryModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface ClientAccountCategoryModel {\n  id?: number;\n  clientID?: number;\n  category?: string;\n  createdBy?: number;\n  updatedBy?: number;\n  updateDate?: Date;\n  date?: Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toClientAccountCategoryModel(json: string): ClientAccountCategoryModel {\n    return cast(JSON.parse(json), r(\"ClientAccountCategoryModel\"));\n  }\n\n  public static clientAccountCategoryModelToJson(value: ClientAccountCategoryModel): string {\n    return JSON.stringify(uncast(value, r(\"ClientAccountCategoryModel\")), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n  if (key) {\n    console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n  }\n  console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) { }\n    }\n    return invalidValue(typs, val);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(cases, val);\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(\"array\", val);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(\"Date\", val);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n      return invalidValue(\"object\", val);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key);\n      }\n    });\n    return result;\n  }\n\n  if (typ === \"any\") return val;\n  if (typ === null) {\n    if (val === null) return val;\n  }\n  if (typ === false) return;\n  while (typeof typ === \"object\" && typ.ref !== undefined) {\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === \"object\") {\n    return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n        : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n          : invalidValue(typ, val);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== \"number\") return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  // @ts-ignore\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nexport const typeMap: any = {\n  \"ClientAccountCategoryModel\": o([\n    { json: \"id\", js: \"id\", typ: u(null, 0) },\n    { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n    { json: \"category\", js: \"category\", typ: u(null, \"\") },\n    { json: \"createdBy\", js: \"createdBy\", typ: u(null, 0) },\n    { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n    { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n    { json: \"date\", js: \"date\", typ: u(null, Date) },\n  ], false),\n};\n","// To parse this data:\n//\n//   import { Convert, ClientInfoModel } from \"./file\";\n//\n//   const clientInfoModel = Convert.toClientInfoModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nimport { LocationCountryModel, typeMap as cmTypeMap } from \"@@addons/interfaces/location/country_model\";\nimport { ClientAccountCategoryModel, typeMap as cacmTypeMap } from \"@@addons/interfaces/clients/account_category\";\n\nexport interface ClientInfoModel {\n    id?: number;\n    name?: string;\n    accountType?: number;\n    country?: string;\n    stateProvince?: string;\n    applicantFirstname?: string;\n    applicantSurname?: string;\n    applicantGender?: number;\n    applicantPhone?: string;\n    applicantEmail?: string;\n    applicantDesignationRole?: number;\n    region?: number;\n    district?: number;\n    constituency?: number;\n    community?: string;\n    subscriptionDuration?: string;\n    subscriptionDate?: Date;\n    subscriptionFee?: string;\n    logo?: string;\n    status?: number;\n    archive?: number;\n    accountCategory?: ClientAccountCategoryModel;\n    website?: null;\n    creationDate?: Date;\n    updatedBy?: number;\n    updateDate?: Date;\n    countryInfo?: LocationCountryModel[];\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toClientInfoModel(json: string): ClientInfoModel {\n        return cast(JSON.parse(json), r(\"ClientInfoModel\"));\n    }\n\n    public static clientInfoModelToJson(value: ClientInfoModel): string {\n        return JSON.stringify(uncast(value, r(\"ClientInfoModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) { }\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n                : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n                    : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"ClientInfoModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"name\", js: \"name\", typ: u(null, \"\") },\n        { json: \"accountType\", js: \"accountType\", typ: u(null, 0) },\n        { json: \"country\", js: \"country\", typ: u(null, \"\") },\n        { json: \"stateProvince\", js: \"stateProvince\", typ: u(null, \"\") },\n        { json: \"applicantFirstname\", js: \"applicantFirstname\", typ: u(null, \"\") },\n        { json: \"applicantSurname\", js: \"applicantSurname\", typ: u(null, \"\") },\n        { json: \"applicantGender\", js: \"applicantGender\", typ: u(null, 0) },\n        { json: \"applicantPhone\", js: \"applicantPhone\", typ: u(null, \"\") },\n        { json: \"applicantEmail\", js: \"applicantEmail\", typ: u(null, \"\") },\n        { json: \"applicantDesignationRole\", js: \"applicantDesignationRole\", typ: u(null, 0) },\n        { json: \"region\", js: \"region\", typ: u(null, 0) },\n        { json: \"district\", js: \"district\", typ: u(null, 0) },\n        { json: \"constituency\", js: \"constituency\", typ: u(null, 0) },\n        { json: \"community\", js: \"community\", typ: u(null, \"\") },\n        { json: \"subscriptionDuration\", js: \"subscriptionDuration\", typ: u(null, \"\") },\n        { json: \"subscriptionDate\", js: \"subscriptionDate\", typ: u(null, Date) },\n        { json: \"subscriptionFee\", js: \"subscriptionFee\", typ: u(null, \"\") },\n        { json: \"logo\", js: \"logo\", typ: u(null, \"\") },\n        { json: \"status\", js: \"status\", typ: u(null, 0) },\n        { json: \"archive\", js: \"archive\", typ: u(null, 0) },\n        { json: \"accountCategory\", js: \"accountCategory\", typ: u(null, r(\"ClientAccountCategoryModel\")) },\n        { json: \"website\", js: \"website\", typ: u(null, null) },\n        { json: \"creationDate\", js: \"creationDate\", typ: u(null, Date) },\n        { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n        { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n        { json: \"countryInfo\", js: \"countryInfo\", typ: u(null, a(r(\"LocationCountryModel\"))) },\n    ], false),\n    \"LocationCountryModel\": cmTypeMap['LocationCountryModel'],\n    \"ClientAccountCategoryModel\": cacmTypeMap['ClientAccountCategoryModel'],\n};\n","// To parse this data:\n//\n//   import { Convert, LocationCountryModel } from \"./file\";\n//\n//   const countryModel = Convert.toCountryModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface LocationCountryModel {\n  id: number;\n  name: string;\n  short: string;\n  code: string;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toCountryModel(json: string): LocationCountryModel {\n    return cast(JSON.parse(json), r(\"LocationCountryModel\"));\n  }\n\n  public static countryModelToJson(value: LocationCountryModel): string {\n    return JSON.stringify(uncast(value, r(\"LocationCountryModel\")), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = ''): never {\n  if (key) {\n    throw Error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n  }\n  throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) { }\n    }\n    return invalidValue(typs, val);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(cases, val);\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(\"array\", val);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(\"Date\", val);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n      return invalidValue(\"object\", val);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key);\n      }\n    });\n    return result;\n  }\n\n  if (typ === \"any\") return val;\n  if (typ === null) {\n    if (val === null) return val;\n    return invalidValue(typ, val);\n  }\n  if (typ === false) return invalidValue(typ, val);\n  while (typeof typ === \"object\" && typ.ref !== undefined) {\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === \"object\") {\n    return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n        : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n          : invalidValue(typ, val);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== \"number\") return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  //@ts-ignore\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nexport const typeMap: any = {\n  \"LocationCountryModel\": o([\n    { json: \"id\", js: \"id\", typ: 0 },\n    { json: \"name\", js: \"name\", typ: \"\" },\n    { json: \"short\", js: \"short\", typ: \"\" },\n    { json: \"code\", js: \"code\", typ: \"\" },\n  ], false),\n};\n"],"names":["u","typs","unionMembers","typeMap","props","json","js","typ","Date","additional","name","ref","arrayItems","static","val","JSON","parse","value","stringify","key","console","error","undefined","jsonToJS","map","forEach","p","jsToJSON","getProps","Array","isArray","cases","indexOf","transformEnum","hasOwnProperty","l","length","i","_","transformUnion","el","transformArray","result","Object","getOwnPropertyNames","prop","v","prototype","call","transformObject","d","isNaN","valueOf","transformDate","transformPrimitive","Convert","transform","r","jsonToJSProps","jsToJSONProps","invalidValue","Error"],"sourceRoot":""}