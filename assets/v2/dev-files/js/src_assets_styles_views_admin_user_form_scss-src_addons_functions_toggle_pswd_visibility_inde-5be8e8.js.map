{"version":3,"file":"../../../client_dashboard/assets/v2/dev-files/js/src_assets_styles_views_admin_user_form_scss-src_addons_functions_toggle_pswd_visibility_inde-5be8e8.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/functions/https/https_swal_error_format.ts","webpack://webpackNumbers/./src/addons/functions/login/index.ts","webpack://webpackNumbers/./src/addons/functions/toggle_pswd_visibility/index.ts","webpack://webpackNumbers/./src/addons/functions/views/home/branch/index.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/branches/index.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/page_access/index.ts","webpack://webpackNumbers/./src/addons/interfaces/generic/gender/index.ts","webpack://webpackNumbers/./src/addons/interfaces/network_calls/login/index.ts","webpack://webpackNumbers/./src/addons/network/clients/branches/index.ts","webpack://webpackNumbers/./src/addons/network/clients/users/access_update.ts","webpack://webpackNumbers/./src/addons/network/clients/users/page_access/index.ts","webpack://webpackNumbers/./src/addons/network/clients/users/post.ts","webpack://webpackNumbers/./src/addons/network/clients/users/put.ts","webpack://webpackNumbers/./src/addons/network/clients/users/put_password.ts","webpack://webpackNumbers/./src/addons/network/generic/gender/index.ts"],"sourcesContent":["export const __swalStyle = `<style>#swal2-validation-message{\r\n  display: flex !important;\r\n  justify-content: flex-start !important;\r\n  font-weight: 600 !important;\r\n}#swal2-validation-message>ul{list-style: inside !important; margin: 0 !important;}</style>`;\r\nexport const https_swal_error_format = (error: any, addStyle = true) => {\r\n  // console.log({\"errorerror\": error})\r\n  if (Array.isArray(error)) {\r\n    const style = addStyle ? __swalStyle : ``;\r\n    let errorMsg = style + \"<ul>\";\r\n    const DATAS: Array<any> = error\r\n    // console.log({ DATAS });\r\n\r\n    DATAS.forEach((data) => {\r\n      // console.log({ data });\r\n      if (typeof data === \"string\") {\r\n        errorMsg += `<li>${data}</li>` + \"\\n\";\r\n      } else {\r\n        errorMsg += `<li>${data.error}</li>` + \"\\n\";\r\n      }\r\n\r\n    });\r\n    return errorMsg = errorMsg + \"</ul>\";\r\n  } else {\r\n    throw new Error(\"Unknown error response format\");\r\n  }\r\n}","import { UserLoginInfo_I, userLoginInfo_S } from \"@@addons/interfaces/network_calls/login\";\r\nimport { base64Decode, base64Encode } from \"../base64\";\r\nimport { get_cookie, set_cookies } from \"../cookies\";\r\n\r\nconst userLoginInfo = 'pdb-client-user';\r\n\r\nexport const setUserLoginInfoCookie = (data: UserLoginInfo_I) => {\r\n  const stringData = JSON.stringify(data);\r\n  // @ts-ignore\r\n  window['supersecret'] = {\r\n    unknowable: {\r\n      ops: {\r\n        email: data.user.email, id: data.user.id, cookieName: userLoginInfo\r\n      }\r\n    }\r\n  };\r\n  set_cookies(userLoginInfo, \"\", -1);\r\n  set_cookies(userLoginInfo, base64Encode(stringData), 3500);\r\n}\r\n\r\nexport const LogUserOut = () => {\r\n  set_cookies(userLoginInfo, \"\", -1);\r\n}\r\n\r\nexport const getUserLoginInfoCookie = (): UserLoginInfo_I => {\r\n  // console.log({ \"get_cookie(userLoginInfo)\": get_cookie(userLoginInfo) });\r\n  const rawCookie = get_cookie(userLoginInfo);\r\n  if (rawCookie === \"\") {\r\n    return null;\r\n  } else {\r\n    const _cookie = base64Decode(get_cookie(userLoginInfo)),\r\n      cookie = JSON.parse(_cookie);\r\n  \r\n    return userLoginInfo_S(cookie);\r\n  }\r\n}\r\n","import '@material/mwc-icon-button';\r\nimport { TextField } from '@material/mwc-textfield';\r\n\r\nlet showingCheckBoxes: { id: string, showing: boolean, elem: HTMLInputElement | TextField, span: HTMLSpanElement }[] = [];\r\nconst labelTextShow = \"Show Password\", labelTextHide = \"Hide Password\";\r\n\r\nexport const togglePswdVisibility = (type: \"mwc-textfield\" | \"input\" = \"input\") => {\r\n  const PSWDs = document.querySelectorAll(type + '[type=\"password\"]');\r\n  // console.log({ PSWDs });\r\n\r\n  PSWDs.forEach((PSWD: HTMLInputElement | TextField, i) => {\r\n    // console.log({ PSWD });\r\n    const parentElement = PSWD.parentElement;\r\n    parentElement.setAttribute('style', parentElement.getAttribute('style') + \"; flex-direction: column !important;\")\r\n    const label = document.createElement('label');\r\n    label.setAttribute('style', label.getAttribute('style') + \"; display: inline-flex;\" +\r\n      \"width: 100%; cursor: pointer; align-items: center; margin-top: 10px; margin-bottom: 0;\"\r\n    );\r\n\r\n    const span = document.createElement('span');\r\n    span.setAttribute('style', span.getAttribute('style') + \"; margin-left: 0.5rem;\" +\r\n      \"font-size: 0.875rem; line-height: 1.25rem; color: rgb(75 85 99);\"\r\n    );\r\n    span.innerText = labelTextShow;\r\n\r\n    const spanDummy = document.createElement('span');\r\n    span.setAttribute('style', span.getAttribute('style') + \"; margin-left: 0.5rem;\" +\r\n      \"font-size: 0.875rem; line-height: 1.25rem; color: rgb(75 85 99);\"\r\n    );\r\n\r\n    const checkbox = document.createElement('input');\r\n    checkbox.type = \"checkbox\";\r\n    checkbox.id = \"pswd-visibility-btn--\" + i;\r\n    checkbox.setAttribute('style', checkbox.getAttribute('style') + \"; -moz-appearance: auto !important;\" +\r\n      \"-webkit-appearance: auto !important; -ms-appearance: auto !important; appearance: auto !important;\" +\r\n      \"opacity: 1; margin-right: 0; z-index: 10;\"\r\n    );\r\n\r\n    label.appendChild(spanDummy);\r\n    label.appendChild(checkbox);\r\n    label.appendChild(span);\r\n\r\n    PSWD.after(label);\r\n\r\n    const showingCheckBox = { id: checkbox.id, showing: false, elem: PSWD, span: span };\r\n    if (!showingCheckBoxes.includes(showingCheckBox)) {\r\n      showingCheckBoxes.push(showingCheckBox);\r\n    }\r\n    checkbox.addEventListener('change', __toggleVisibility)\r\n  });\r\n}\r\n\r\nconst __toggleVisibility = (e: { preventDefault: () => void; currentTarget: any; }) => {\r\n  e.preventDefault();\r\n  const checkbox: HTMLInputElement = e.currentTarget;\r\n  // console.log({ checkbox, e })\r\n  checkbox.checked\r\n  showingCheckBoxes.forEach(showingCheckBox => {\r\n    if (checkbox.id === showingCheckBox.id) {\r\n      if (showingCheckBox.showing === false) {\r\n        showingCheckBox.elem.type = \"text\";\r\n        showingCheckBox.span.innerText = labelTextHide;\r\n        showingCheckBox.showing = true;\r\n      } else {\r\n        showingCheckBox.elem.type = \"password\";\r\n        showingCheckBox.span.innerText = labelTextShow;\r\n        showingCheckBox.showing = false;\r\n      }\r\n      // console.log({ showingCheckBox, button });\r\n    }\r\n  });\r\n}","import { base64Encode, base64Decode } from \"@@addons/functions/base64\";\r\nimport { set_cookies, get_cookie } from \"@@addons/functions/cookies\";\r\nimport { clientBranchInfo_S, ClientBranchShort_I } from \"@@addons/interfaces/clients/branches\";\r\n\r\nconst userLoginInfo = 'pdb-active-branch';\r\n\r\nexport const setActiveBranchIdCookie = (data: ClientBranchShort_I) => {\r\n  const stringData = JSON.stringify(data);\r\n  set_cookies(userLoginInfo, \"\", -1);\r\n  set_cookies(userLoginInfo, base64Encode(stringData), 3500);\r\n}\r\n\r\nexport function removeActiveBranchIdCookie() {\r\n  set_cookies(userLoginInfo, \"\", -1);\r\n}\r\n\r\nexport const getActiveBranchIdCookie = (): ClientBranchShort_I => {\r\n  const rawCookie = get_cookie(userLoginInfo);\r\n  // console.log({\"rawCookie-getActiveBranchId\": rawCookie, userLoginInfo});\r\n  \r\n  if (rawCookie === \"\") {\r\n    return null;\r\n  } else {\r\n    const _cookie = base64Decode(get_cookie(userLoginInfo)),\r\n      cookie = JSON.parse(_cookie);\r\n\r\n    return clientBranchInfo_S(cookie);\r\n  }\r\n}","export interface ClientBranches_I {\r\n  id: number,\r\n  name: string,\r\n  accountId?: number,\r\n  createdBy?: number,\r\n  creationDate?: Date,\r\n  updatedBy?: number,\r\n  updateDate?: Date,\r\n}\r\n\r\nexport interface ClientBranchShort_I {\r\n  id: number,\r\n  name: string,\r\n  accountId?: number,\r\n}\r\n\r\nexport function clientBranchInfo_S(data: any): ClientBranchShort_I {\r\n  const clientBranchInfo_S = {\r\n    id: Number(data['id']),\r\n    name: String(data['name']),\r\n    accountId: Number(data['accountId']),\r\n  };\r\n\r\n  return clientBranchInfo_S;\r\n}\r\n","export interface ClientPageAccess_I {\r\n  id?: number,\r\n  page?: string,\r\n}\r\nexport function ClientPageAccess_S(data: any): ClientPageAccess_I {\r\n  // console.log({data});\r\n  \r\n  const clientPageAccess_S: ClientPageAccess_I = {\r\n    id: data['id'],\r\n    page: data['page'],\r\n  };\r\n\r\n  return clientPageAccess_S;\r\n}","export interface GenericGenderInfo_I { \r\n  id: number,\r\n  name: string,\r\n}\r\n\r\nexport function GenericGenderInfo_S(data: any): GenericGenderInfo_I {\r\n  // console.log({data});\r\n  \r\n  const genericGenderInfo_S: GenericGenderInfo_I = {\r\n    id: data['id'],\r\n    name: data['name'],\r\n  };\r\n\r\n  return genericGenderInfo_S;\r\n}","import { ClientUserShort_I } from \"@@addons/interfaces/clients/users\";\r\n\r\nexport interface UserLoginInfo_I {\r\n  expiry: Date,\r\n  token: string,\r\n  user: ClientUserShort_I,\r\n}\r\n\r\nexport function userLoginInfo_S(data: any): UserLoginInfo_I {\r\n  const user = data['user'];\r\n  const userLoginInfo_S = {\r\n    expiry: new Date(data['expiry']),\r\n    token: String(data['token']),\r\n    user: {\r\n      id: Number(user['id']),\r\n      accountId: Number(user['accountId']),\r\n      branchId: Number(user['branchId']),\r\n      firstname: String(user['firstname']),\r\n      surname: String(user['surname']),\r\n      phone: String(user['phone']),\r\n      email: String(user['email']),\r\n      profilePicture: String(user['profilePicture']),\r\n    },\r\n  };\r\n\r\n  return userLoginInfo_S;\r\n}\r\n","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_ClientBranches<Type>(type: Number = null) {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/branch'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function PUT_ClientUserAccess(ID: Number): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user-access/setup/' + ID,\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Setup user page access?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n        headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_ClientPageAccess<Type>(ID: Number = null, url_params: string = \"\") {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user-access/pages'\r\n    + (ID === null ? \"\" : \"/\" + ID) + (url_params),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_ClientUser(): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Add Admin User?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function PUT_ClientUser(ID: Number): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user/' + ID,\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Update user profile?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function PUT_ClientUserPassword(ID: Number): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user/change-password/' + ID,\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Update user password?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PATCH\",\r\n        body: formData,\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_GenericGender<Type>(type: Number = null) {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'generic/gender'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}"],"names":["__swalStyle","https_swal_error_format","error","addStyle","Array","isArray","errorMsg","forEach","data","Error","userLoginInfo","setUserLoginInfoCookie","stringData","JSON","stringify","window","unknowable","ops","email","user","id","cookieName","set_cookies","base64Encode","LogUserOut","getUserLoginInfoCookie","get_cookie","_cookie","base64Decode","cookie","parse","userLoginInfo_S","showingCheckBoxes","labelTextShow","togglePswdVisibility","type","document","querySelectorAll","PSWD","i","parentElement","setAttribute","getAttribute","label","createElement","span","innerText","spanDummy","checkbox","appendChild","after","showingCheckBox","showing","elem","includes","push","addEventListener","__toggleVisibility","e","preventDefault","currentTarget","checked","setActiveBranchIdCookie","removeActiveBranchIdCookie","getActiveBranchIdCookie","clientBranchInfo_S","Number","name","String","accountId","ClientPageAccess_S","page","GenericGenderInfo_S","expiry","Date","token","branchId","firstname","surname","phone","profilePicture","GET_ClientBranches","_get_cookie","url","CONSTANTS","HTTP","http","method","headers","Authorization","NetWorkCallResponses","console","errorHttp","PUT_ClientUserAccess","ID","formContainer","querySelector","formData","FormData","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","body","then","networkCallRes","_RESPONSE","response","unknownError","length","errors","err","errormsg","res","catch","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","value","Object","VALUE","message","success","setTimeout","location","reload","GET_ClientPageAccess","url_params","POST_ClientUser","PUT_ClientUser","PUT_ClientUserPassword","GET_GenericGender"],"sourceRoot":""}