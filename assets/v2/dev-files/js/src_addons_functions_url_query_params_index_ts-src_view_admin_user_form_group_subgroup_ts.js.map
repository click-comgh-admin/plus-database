{"version":3,"file":"../../../client_dashboard/assets/v2/dev-files/js/src_addons_functions_url_query_params_index_ts-src_view_admin_user_form_group_subgroup_ts.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/functions/https/https_swal_error_format.ts","webpack://webpackNumbers/./src/addons/functions/url_query_params/index.ts","webpack://webpackNumbers/./src/addons/interfaces/members/groupings/member_categories/index.ts","webpack://webpackNumbers/./src/addons/interfaces/members/groupings/subgroup/index.ts","webpack://webpackNumbers/./src/addons/network/clients/branches/index.ts","webpack://webpackNumbers/./src/addons/network/clients/users/group_subgroup_add.ts","webpack://webpackNumbers/./src/addons/network/clients/users/group_subgroup_update.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/group/index.ts","webpack://webpackNumbers/./src/addons/network/members/groupings/subgroup/index.ts","webpack://webpackNumbers/./src/view/admin/user/form/group_subgroup.ts"],"sourcesContent":["export const __swalStyle = `<style>#swal2-validation-message{\r\n  display: flex !important;\r\n  justify-content: flex-start !important;\r\n  font-weight: 600 !important;\r\n}#swal2-validation-message>ul{list-style: inside !important; margin: 0 !important;}</style>`;\r\nexport const https_swal_error_format = (error: any, addStyle = true) => {\r\n  // console.log({\"errorerror\": error})\r\n  if (Array.isArray(error)) {\r\n    const style = addStyle ? __swalStyle : ``;\r\n    let errorMsg = style + \"<ul>\";\r\n    const DATAS: Array<any> = error\r\n    // console.log({ DATAS });\r\n\r\n    DATAS.forEach((data) => {\r\n      // console.log({ data });\r\n      if (typeof data === \"string\") {\r\n        errorMsg += `<li>${data}</li>` + \"\\n\";\r\n      } else {\r\n        errorMsg += `<li>${data.error}</li>` + \"\\n\";\r\n      }\r\n\r\n    });\r\n    return errorMsg = errorMsg + \"</ul>\";\r\n  } else {\r\n    throw new Error(\"Unknown error response format\");\r\n  }\r\n}","export const urlQueryParams = () => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n\r\n  return params;\r\n}\r\nexport const urlQueryParamsGet = (query: string) => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n  let value: string = null;\r\n  for (const key in params) {\r\n    if (key === query) {\r\n      value = params[key]\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nexport const urlQueryParamsJoin = (object:{\r\n  [k: string]: string;\r\n}) => {\r\n  let urlStr: string = \"\";\r\n  let index = 0;\r\n  for (const key in object) {\r\n    index += 1; \r\n    urlStr += `${(index > 1) ? \"&\": \"\"}${key}=${object[key]}`;\r\n  }\r\n  return urlStr;\r\n}","export interface GroupingsMemberCategories_I {\r\n  id: number,\r\n  category: string,\r\n  clientId?: number,\r\n  createdBy?: number,\r\n  date?: Date,\r\n  updatedBy?: number,\r\n  updateDate?: Date,\r\n}\r\nexport function GroupingsMemberCategories_S(data: any): GroupingsMemberCategories_I {\r\n  // console.log({data});\r\n\r\n  const groupingsMemberCategories_S: GroupingsMemberCategories_I = {\r\n    id: Number(data['id']),\r\n    clientId: Number(data['clientId']),\r\n    category: String(data['category']),\r\n    createdBy: Number(data['createdBy']),\r\n    updatedBy: Number(data['updatedBy']),\r\n    date: new Date(data['date']),\r\n    updateDate: new Date(data['updateDate']),\r\n  };\r\n\r\n  return groupingsMemberCategories_S;\r\n}","import { GET_MemberGroupingsGroups } from \"@@addons/network/members/groupings/group\";\r\nimport { GroupingsGroup_I } from \"../group\";\r\nimport { GroupingsMemberCategories_I, GroupingsMemberCategories_S } from \"../member_categories\";\r\n\r\nexport interface GroupingsSubGroup_I {\r\n  id: number,\r\n  clientId?: number,\r\n  groupId?: number,\r\n  groupName?: string,\r\n  branchId?: number,\r\n  memberCategoryId?: GroupingsMemberCategories_I,\r\n  subgroup?: string,\r\n  createdBy?: number,\r\n  updatedBy?: number,\r\n  updateDate?: Date,\r\n  date?: Date,\r\n}\r\n\r\nexport function GroupingsSubGroup_S(data: any): GroupingsSubGroup_I {\r\n  // console.log({data});\r\n  const groupId = data['groupId'];\r\n  const groupingsSubGroup_S: GroupingsSubGroup_I = {\r\n    id: Number(data['id']),\r\n    clientId: Number(data['clientId']),\r\n    groupId: Number(groupId['id']),\r\n    groupName: String(groupId['group']),\r\n    subgroup: String(data['subgroup']),\r\n    branchId: Number(data['branchId']),\r\n    memberCategoryId: GroupingsMemberCategories_S(data['memberCategoryId']),\r\n    createdBy: Number(data['createdBy']),\r\n    updatedBy: Number(data['updatedBy']),\r\n    date: new Date(data['date']),\r\n    updateDate: new Date(data['updateDate']),\r\n  };\r\n\r\n  return groupingsSubGroup_S;\r\n}\r\n\r\n\r\nasync function getGroup(ID: number) {\r\n  const _networkResponse = await GET_MemberGroupingsGroups<GroupingsGroup_I>(ID);\r\n  if (_networkResponse === null) {\r\n    return \"???\";\r\n  } else {\r\n    if (_networkResponse.response.success && 'group' in _networkResponse.response.data) {\r\n      \r\n      const group: GroupingsGroup_I = _networkResponse.response.data;\r\n      return group.group;\r\n    } else {\r\n      let message = \"\";\r\n      let _message = _networkResponse.response.message;\r\n      if (Array.isArray(_message)) {\r\n        message = \"Unknown Error!\";\r\n      } else {\r\n        message = _message;\r\n      }\r\n      return message;\r\n    }\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_ClientBranches<Type>(type: Number = null) {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/branch'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_ClientUserGroupSubgroup(): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user-group-subgroup',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user-group-subgroup\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Add group(s)/ subgroup(s)?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function PUT_ClientUserGroupSubgroup(ID: Number): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/user-group-subgroup/' + ID,\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"client-user-group-subgroup\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Update user group(s)/ subgroup(s)?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n        headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_MemberGroupingsGroups<Type>(type: Number = null, ) {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/group'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_MemberGroupingsSubGroups<Type>(type: Number = null, ) {\r\n  \r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/groupings/sub-group'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import '@@assets/styles/views/admin/user/form.scss';\r\nimport { LitElement, html, css } from 'lit';\r\nimport { customElement, property } from 'lit/decorators.js';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-textfield';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-tab';\r\nimport '@material/mwc-tab-bar';\r\nimport '@@addons/widgets/form/new/select';\r\nimport { getActiveBranchIdCookie } from '@@addons/functions/views/home/branch';\r\nimport { ClientBranches_I, ClientBranchShort_I } from '@@addons/interfaces/clients/branches';\r\nimport { NetworkCallResponse_I } from '@@addons/interfaces/network_calls/response';\r\nimport { GET_ClientBranches } from '@@addons/network/clients/branches';\r\nimport { getUserLoginInfoCookie } from '@@addons/functions/login';\r\nimport { UserLoginInfo_I } from '@@addons/interfaces/network_calls/login';\r\nimport { ClientUsers_I } from '@@addons/interfaces/clients/users';\r\nimport { ClientUserGroupSubgroup_I } from '@@addons/interfaces/clients/users/group_subgroup';\r\nimport { GroupingsGroup_I } from '@@addons/interfaces/members/groupings/group';\r\nimport { GroupingsSubGroup_I, GroupingsSubGroup_S } from '@@addons/interfaces/members/groupings/subgroup';\r\nimport { GET_MemberGroupingsGroups } from '@@addons/network/members/groupings/group';\r\nimport { GET_MemberGroupingsSubGroups } from '@@addons/network/members/groupings/subgroup';\r\nimport { POST_ClientUserGroupSubgroup } from '@@addons/network/clients/users/group_subgroup_add';\r\nimport { PUT_ClientUserGroupSubgroup } from '@@addons/network/clients/users/group_subgroup_update';\r\n\r\n\r\ntype groupSubgroupType = { id: number; name: string; isSelected: \"true\" | \"false\"; selected: boolean; };\r\n@customElement(\"pdb-admin-user-group-subgroup-form\")\r\nexport class PdbAdminUserGroupSubgroupForm extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  public userId?: number = 0;\r\n\r\n  @property({ type: String })\r\n  public edit: \"true\" | \"false\" = \"false\";\r\n\r\n  @property({ type: Boolean })\r\n  public editAccess?: boolean = false;\r\n\r\n  @property({ type: Boolean })\r\n  public isEditable?: boolean = false;\r\n\r\n  @property({ type: String })\r\n  public page_type: \"mine\" | \"not-mine\" = \"mine\";\r\n\r\n  @property({ type: Array })\r\n  private _branches: ClientBranches_I[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _groups: GroupingsGroup_I[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _subgroups: GroupingsSubGroup_I[] = [];\r\n\r\n  @property({ type: Array })\r\n  private _activeBranchId?: ClientBranchShort_I[] = null;\r\n\r\n  @property({ type: Array })\r\n  private _userLoginInfo?: UserLoginInfo_I[] = null;\r\n\r\n  private get _clientUserDefault(): NetworkCallResponse_I<ClientUsers_I> {\r\n    const user: ClientUsers_I = {};\r\n    return { data: user, message: \"\", success: false }\r\n  }\r\n\r\n  private _clientUser: NetworkCallResponse_I<ClientUsers_I> = this._clientUserDefault;\r\n\r\n  public set clientUser(value: NetworkCallResponse_I<ClientUsers_I>) {\r\n    this._clientUser = value;\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public get clientUser(): NetworkCallResponse_I<ClientUsers_I> {\r\n    return this._clientUser;\r\n  }\r\n\r\n  private get _clientUserGroupSubgroupDefault(): NetworkCallResponse_I<ClientUserGroupSubgroup_I> {\r\n    const groupSubgroup: ClientUserGroupSubgroup_I = {};\r\n    return { data: groupSubgroup, message: \"\", success: false }\r\n  }\r\n\r\n  private _clientUserGroupSubgroup: NetworkCallResponse_I<ClientUserGroupSubgroup_I> = this._clientUserGroupSubgroupDefault;\r\n\r\n  public set clientUserGroupSubgroup(value: NetworkCallResponse_I<ClientUserGroupSubgroup_I>) {\r\n    this._clientUserGroupSubgroup = value;\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public get clientUserGroupSubgroup(): NetworkCallResponse_I<ClientUserGroupSubgroup_I> {\r\n    return this._clientUserGroupSubgroup;\r\n  }\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n    const activeBranchId = getActiveBranchIdCookie();\r\n    this._activeBranchId = (activeBranchId === null) ? null : [activeBranchId];\r\n    this._userLoginInfo = [getUserLoginInfoCookie()];\r\n\r\n    await this.getBranches();\r\n    await this.getGroups();\r\n    await this.getSubGroups();\r\n\r\n    // console.log({\"clientUser\": this.clientUser});\r\n    // console.log({\"clientUserGroupSubgroup\": this.clientUserGroupSubgroup});\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    if (this.edit === \"true\") {\r\n      if (this.page_type === \"mine\") {\r\n        this.isEditable = true;\r\n      } else {\r\n        if (this.editAccess) {\r\n          this.isEditable = true;\r\n        } else {\r\n          this.isEditable = false;\r\n        }\r\n      }\r\n      return html`\r\n        ${this.groupSubgroup}\r\n      `;\r\n    } else {\r\n      return html`\r\n        ${this.form}\r\n      `;\r\n    }\r\n  }\r\n\r\n  private get groupSubgroup() {\r\n    let clientId = 0;\r\n    if (this._activeBranchId !== null) {\r\n      clientId = this._activeBranchId[0].accountId;\r\n    }\r\n\r\n    return html`\r\n      <div class=\"form-container flex justify-center\">\r\n        <div class=\"app-container- !px-0\">\r\n          <div class=\"app-container--row !px-0\">\r\n            <div class=\"app-container--col-md-12\">\r\n              <header class=\"header warning app-container--col-md-12\">\r\n                <label for=\"\" class=\"label\">\r\n                  <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                  <h1 class=\"h1 !text-red-400\">Admin User Group(s)/ Sub-Group(s)</h1>\r\n                  <h3 class=\"h3\">Update Admin User Group(s)/ Sub-Group(s)!</h3>\r\n                </label>\r\n              </header>\r\n              <form method=\"post\" action=\"#\" class=\"form\" make-general-posts=\"client-user-group-subgroup\" enctype=\"multipart/form-data\">\r\n                <div class=\"row justify-content-center\">\r\n                  ${this.accessFieldSelectBox}\r\n                  <div class=\"col-md-12 col-lg-8\">\r\n                    <input type=\"hidden\" name=\"clientId\" id=\"clientId\" value=\"${clientId}\" />\r\n                    <input type=\"hidden\" name=\"userId\" id=\"userId\" value=\"${this.userId}\" />\r\n                    <div class=\"form-input-container\">\r\n                      <mwc-button label=\"Update Group(s)/ Subgroup(s)\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                      </mwc-button>\r\n                    </div>\r\n      \r\n                    <div class=\"flex form-input-container items-center text-center\">\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                      <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                        Lets go digital...\r\n                      </label>\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get form() {\r\n\r\n    let clientId = 0;\r\n    if (this._activeBranchId !== null) {\r\n      clientId = this._activeBranchId[0].accountId;\r\n    }\r\n\r\n    return html`\r\n      <div class=\"form-container flex justify-center\">\r\n        <div class=\"app-container- !px-0\">\r\n          <div class=\"app-container--row !px-0\">\r\n            <div class=\"app-container--col-md-12\">\r\n              <header class=\"header warning app-container--col-md-12\">\r\n                <label for=\"\" class=\"label\">\r\n                  <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                  <h1 class=\"h1 !text-red-400\">Admin User Group(s)/ Sub-Group(s)</h1>\r\n                  <h3 class=\"h3\">Add Admin User Group(s)/ Sub-Group(s)!</h3>\r\n                </label>\r\n              </header>\r\n              <form method=\"post\" action=\"#\" class=\"form\" make-general-posts=\"client-user-group-subgroup\"\r\n                enctype=\"multipart/form-data\">\r\n                <div class=\"row justify-content-center\">\r\n      \r\n                  ${this.accessFieldSelectBox}\r\n                  <div class=\"col-md-12 col-lg-8\">\r\n                    <input type=\"hidden\" name=\"clientId\" id=\"clientId\" value=\"${clientId}\" />\r\n                    <input type=\"hidden\" name=\"userId\" id=\"userId\" value=\"${this.userId}\" />\r\n                    <div class=\"form-input-container\">\r\n                      <mwc-button label=\"Add Group(s)/ Sub-Group(s)\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                      </mwc-button>\r\n                    </div>\r\n      \r\n                    <div class=\"flex form-input-container items-center text-center\">\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                      <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                        Lets go digital...\r\n                      </label>\r\n                      <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get groupsSubgroups() {\r\n    type returnType = { groups: groupSubgroupType[], subgroups: groupSubgroupType[] };\r\n    let groups: groupSubgroupType[] = [];\r\n    let subgroups: groupSubgroupType[] = [];\r\n\r\n    const clientUserGroupSubgroup = this.clientUserGroupSubgroup,\r\n      _data = clientUserGroupSubgroup.data,\r\n      DATA = Array.isArray(_data) ? _data[0] : _data,\r\n      SUCCESS = clientUserGroupSubgroup.success;\r\n\r\n    this._groups.forEach(_group => {\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      if (SUCCESS) {\r\n        DATA.group.forEach(group => {\r\n          if (group.id === _group.id) {\r\n            isSelected = true;\r\n            isSelectedAlt = \"true\";\r\n          }\r\n        });\r\n      }\r\n      const group: groupSubgroupType = {\r\n        id: _group.id, name: _group.group, isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!groups.includes(group)) {\r\n        groups.push(group);\r\n      }\r\n    });\r\n\r\n    // console.log({\"this._subgroups\": this._subgroups})\r\n    this._subgroups.forEach(_subgroup => {\r\n      _subgroup = GroupingsSubGroup_S(_subgroup);\r\n      let isSelected: boolean = false,\r\n        isSelectedAlt: \"true\" | \"false\" = \"false\";\r\n      if (SUCCESS) {\r\n        DATA.subgroup.forEach(subgroup => {\r\n          if (subgroup.id === _subgroup.id) {\r\n            isSelected = true;\r\n            isSelectedAlt = \"true\";\r\n          }\r\n        });\r\n      }\r\n      const subgroup: groupSubgroupType = {\r\n        id: _subgroup.id, name: `${_subgroup.groupName} => ${_subgroup.subgroup}`,\r\n        isSelected: isSelectedAlt, selected: isSelected,\r\n      };\r\n\r\n      if (!subgroups.includes(subgroup)) {\r\n        subgroups.push(subgroup);\r\n      }\r\n    });\r\n\r\n    const _returnType: returnType = {\r\n      groups: groups, subgroups: subgroups,\r\n    }\r\n    return _returnType;\r\n  }\r\n\r\n  private get accessFieldSelectBox() {\r\n    const groupsSubgroups = this.groupsSubgroups,\r\n      groups = groupsSubgroups.groups,\r\n      subgroups = groupsSubgroups.subgroups;\r\n\r\n    return html`\r\n      <div class=\"col-md-6 col-lg-4\">\r\n        <h4 class=\"font-semibold my-2\">Select User Group(s)</h4>\r\n        <select-input name=\"group\" multiple class=\"w-full\" id=\"group\" label=\"Select User Group(s)\" .options=\"${groups}\"\r\n          outlined required>\r\n        </select-input>\r\n      </div>\r\n      <div class=\"col-md-6 col-lg-4\">\r\n        <h4 class=\"font-semibold my-2\">Select User Sub-Group(s)</h4>\r\n        <select-input name=\"subgroup\" multiple class=\"w-full\" id=\"subgroup\" label=\"Select User Sub-Group(s)\"\r\n          .options=\"${subgroups}\" outlined required>\r\n        </select-input>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  private async getBranches() {\r\n    const _networkResponse = await GET_ClientBranches<ClientBranches_I>();\r\n    let __branches: ClientBranches_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __branches.push({ id: 0, name: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: ClientBranches_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __branches = DATA;\r\n      }\r\n    }\r\n    this._branches = [...this._branches, ...__branches];\r\n  }\r\n\r\n  private async getGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsGroups<GroupingsGroup_I>();\r\n    let __groups: GroupingsGroup_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __groups.push({ id: 0, group: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: GroupingsGroup_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __groups = DATA;\r\n      }\r\n    }\r\n    this._groups = [...this._groups, ...__groups];\r\n  }\r\n\r\n  private async getGroup(ID: number) {\r\n    const _networkResponse = await GET_MemberGroupingsGroups<GroupingsGroup_I>(ID);\r\n    if (_networkResponse === null) {\r\n      return \"???\";\r\n    } else {\r\n      if (_networkResponse.response.success && 'group' in _networkResponse.response.data) {\r\n\r\n        const group: GroupingsGroup_I = _networkResponse.response.data;\r\n        return group.group;\r\n      } else {\r\n        let message = \"\";\r\n        let _message = _networkResponse.response.message;\r\n        if (Array.isArray(_message)) {\r\n          message = \"Unknown Error!\";\r\n        } else {\r\n          message = _message;\r\n        }\r\n        return message;\r\n      }\r\n    }\r\n  }\r\n\r\n  private async getSubGroups() {\r\n    const _networkResponse = await GET_MemberGroupingsSubGroups<GroupingsSubGroup_I>();\r\n    let __subgroups: GroupingsSubGroup_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __subgroups.push({ id: 0, subgroup: \"**NOT FOUND**\", date: new Date() });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const DATA: GroupingsSubGroup_I[] = _networkResponse.response.data;\r\n        // console.log({DATA});\r\n        __subgroups = DATA;\r\n      }\r\n    }\r\n    this._subgroups = [...this._subgroups, ...__subgroups];\r\n  }\r\n\r\n  async submitForm(e: PointerEvent) {\r\n    e.preventDefault();\r\n\r\n    if (this.edit === \"true\") {\r\n      if (this.isEditable) {\r\n        const clientUserGroupSubgroup = this.clientUserGroupSubgroup,\r\n          _data = clientUserGroupSubgroup.data,\r\n          DATA = Array.isArray(_data) ? _data[0] : _data,\r\n          SUCCESS = clientUserGroupSubgroup.success;\r\n        if (SUCCESS) {\r\n          await PUT_ClientUserGroupSubgroup(DATA.id);\r\n        }\r\n      }\r\n    } else {\r\n      await POST_ClientUserGroupSubgroup();\r\n    }\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["__swalStyle","https_swal_error_format","error","addStyle","Array","isArray","errorMsg","forEach","data","Error","urlQueryParams","urlSearchParams","URLSearchParams","window","location","search","Object","fromEntries","entries","urlQueryParamsGet","query","params","value","key","urlQueryParamsJoin","object","urlStr","index","GroupingsMemberCategories_S","id","Number","clientId","category","String","createdBy","updatedBy","date","Date","updateDate","GroupingsSubGroup_S","groupId","groupName","subgroup","branchId","memberCategoryId","GET_ClientBranches","type","_get_cookie","getUserLoginInfoCookie","url","CONSTANTS","HTTP","http","method","headers","Authorization","token","NetWorkCallResponses","console","errorHttp","POST_ClientUserGroupSubgroup","formContainer","document","querySelector","formData","FormData","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","body","then","networkCallRes","_RESPONSE","response","unknownError","length","errors","e","err","errormsg","push","res","catch","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","VALUE","message","success","setTimeout","reload","PUT_ClientUserGroupSubgroup","ID","GET_MemberGroupingsGroups","GET_MemberGroupingsSubGroups","PdbAdminUserGroupSubgroupForm","LitElement","constructor","super","userId","edit","editAccess","isEditable","page_type","_branches","_groups","_subgroups","_activeBranchId","_userLoginInfo","_clientUser","this","_clientUserDefault","_clientUserGroupSubgroup","_clientUserGroupSubgroupDefault","clientUser","requestUpdate","clientUserGroupSubgroup","connectedCallback","activeBranchId","getActiveBranchIdCookie","getBranches","getGroups","getSubGroups","disconnectedCallback","render","html","groupSubgroup","form","accountId","accessFieldSelectBox","submitForm","groupsSubgroups","groups","subgroups","_data","DATA","SUCCESS","_group","isSelected","isSelectedAlt","group","name","selected","includes","_subgroup","firstUpdated","_networkResponse","__branches","__groups","getGroup","_message","__subgroups","preventDefault","createRenderRoot","styles","css","property","Boolean","customElement"],"sourceRoot":""}