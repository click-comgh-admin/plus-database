{"version":3,"file":"../../../client_dashboard/assets/v2/dev-files/js/src_view_membership_connections_accounts_add_ts-src_view_membership_connections_accounts_view_ts.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/functions/https/https_swal_error_format.ts","webpack://webpackNumbers/./src/addons/interfaces/members/connections/types.ts","webpack://webpackNumbers/./src/addons/network/members/connections/accounts/delete.ts","webpack://webpackNumbers/./src/addons/network/members/connections/accounts/post.ts","webpack://webpackNumbers/./src/addons/network/members/connections/types/index.ts","webpack://webpackNumbers/./src/view/membership/connections/accounts/add.ts","webpack://webpackNumbers/./src/view/membership/connections/accounts/view.ts"],"sourcesContent":["export const __swalStyle = `<style>#swal2-validation-message{\r\n  display: flex !important;\r\n  justify-content: flex-start !important;\r\n  font-weight: 600 !important;\r\n}#swal2-validation-message>ul{list-style: inside !important; margin: 0 !important;}</style>`;\r\nexport const https_swal_error_format = (error: any, addStyle = true) => {\r\n  // console.log({\"errorerror\": error})\r\n  if (Array.isArray(error)) {\r\n    const style = addStyle ? __swalStyle : ``;\r\n    let errorMsg = style + \"<ul>\";\r\n    const DATAS: Array<any> = error\r\n    // console.log({ DATAS });\r\n\r\n    DATAS.forEach((data) => {\r\n      // console.log({ data });\r\n      if (typeof data === \"string\") {\r\n        errorMsg += `<li>${data}</li>` + \"\\n\";\r\n      } else {\r\n        errorMsg += `<li>${data.error}</li>` + \"\\n\";\r\n      }\r\n\r\n    });\r\n    return errorMsg = errorMsg + \"</ul>\";\r\n  } else {\r\n    throw new Error(\"Unknown error response format\");\r\n  }\r\n}","export interface UserConnectionType_I {\r\n  id?: number,\r\n  clientId?: number,\r\n  type?: string,\r\n  description?: string,\r\n  lastUpdatedBy?: number,\r\n  lastUpdateDate?: Date,\r\n  createdBy?: number,\r\n  creationDate?: Date,\r\n}\r\n\r\nexport function UserConnectionType_S(data: any): UserConnectionType_I {\r\n  // console.log({data});\r\n\r\n  const userConnectionType_S: UserConnectionType_I = {\r\n    id: Number(data['id']),\r\n    type: String(data['type']),\r\n    clientId: Number(data['clientId']),\r\n    description: String(data['description']),\r\n    createdBy: Number(data['createdBy']),\r\n    creationDate: new Date(data['creationDate']),\r\n    lastUpdatedBy: Number(data['lastUpdatedBy']),\r\n    lastUpdateDate: new Date(data['lastUpdateDate']),\r\n  };\r\n\r\n  return userConnectionType_S;\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function DELETE_UserConnectionAccount(ID: Number,): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/user-connection-account/' + ID,\r\n    formData = {};\r\n\r\n  return Swal.fire({\r\n    title: 'Remove Connection?',\r\n    text: \"Proceed with care!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n          method: \"DELETE\",\r\n          body: JSON.stringify(formData),\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        try {\r\n          const networkCallRes = new NetWorkCallResponses(\"delete\", HTTP, false);\r\n          const _RESPONSE = networkCallRes.response;\r\n          if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n            if (_RESPONSE.unknownError.length > 0) {\r\n              // console.log({\"_RESPONSE.unknownError\": _RESPONSE.unknownError});\r\n\r\n              let errors: Array<{ error: string }> = [];\r\n              _RESPONSE.unknownError.forEach(e => {\r\n                const _errors = e.errors;\r\n                _errors.forEach(err => {\r\n                  errors.push({ error: err });\r\n                });\r\n              });\r\n\r\n              const res = https_swal_error_format(errors);\r\n              Swal.showValidationMessage(\r\n                `${res}`\r\n              );\r\n            }\r\n          }\r\n          return networkCallRes;\r\n        } catch (error) {\r\n          console.error({ error });\r\n          let errorHttp = HTTP;\r\n          errorHttp['error'] = error;\r\n          const networkCallRes = new NetWorkCallResponses(\"delete\", errorHttp, true);\r\n          networkCallRes.postForm\r\n          return networkCallRes;\r\n        }\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess? 'success': 'error',\r\n        iconColor: '#f97817',\r\n        confirmButtonColor: '#f97817',\r\n      });\r\n      isSuccess? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500): null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function POST_UserConnectionAccount(): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/user-connection-account',\r\n    formContainer: HTMLFormElement = document.querySelector('[make-general-posts=\"user-connection-account\"]'),\r\n    formData = new FormData(formContainer);\r\n\r\n  return Swal.fire({\r\n    title: 'Add Connection?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false, formContainer);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_UserConnectionType<Type>(type: Number = null) {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'members/user-connection-type'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie.token\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import '@@assets/styles/views/attendance/setup/form.scss';\r\nimport { LitElement, html, css, nothing } from 'lit';\r\nimport { customElement, property, } from 'lit/decorators.js';\r\nimport \"@material/mwc-button\";\r\nimport \"@material/mwc-textarea\";\r\nimport \"@material/mwc-textfield\";\r\nimport \"@material/mwc-select\";\r\nimport '@@addons/widgets/form/new/select';\r\nimport { POST_UserConnectionAccount } from '@@addons/network/members/connections/accounts/post';\r\nimport { CONSTANTS } from '@@addons/constants';\r\nimport { SelectInputProcessedAjaxResponse_I, SelectInputProcessedAjaxUrlParam_I } from '@@addons/interfaces/form/select-input';\r\nimport { QueryOptions } from 'select2';\r\nimport { getUserLoginInfoCookie } from '@@addons/functions/login';\r\nimport { UserConnectionType_I, UserConnectionType_S } from '@@addons/interfaces/members/connections/types';\r\nimport { GET_UserConnectionType } from '@@addons/network/members/connections/types';\r\n\r\n\r\n@customElement(\"pdb-connections-accounts-add\")\r\nexport class PdbConnectionsAccountsAdd extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Boolean })\r\n  private showing?: boolean = false;\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage1: number = 0;\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage2: number = 0;\r\n\r\n  @property({ type: Array })\r\n  private _connection_types: UserConnectionType_I[] = [];\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    await this.getConnectionTypes();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    return html`\r\n      ${this.show_form}\r\n      ${this.toggle_showing_button}\r\n    `;\r\n  }\r\n\r\n  private get show_form() {\r\n    let ajaxHeader: {Authorization?: string} = {};\r\n    // const _get_cookie = base64Decode(get_cookie('client_tokenLogin'));\r\n    const _get_cookie = getUserLoginInfoCookie();\r\n    ajaxHeader.Authorization = \"Token \" + _get_cookie.token;\r\n    if (this.showing) {\r\n      return html`\r\n        <div class=\"shadow-sm\">\r\n          <div class=\"form-container\">\r\n            <div class=\" !px-0\">\r\n              <div class=\"-row !px-0\">\r\n                <div class=\"-col-md-12\">\r\n                  <header class=\"header warning -col-md-12\">\r\n                    <label for=\"\" class=\"label\">\r\n                      <mwc-icon class=\"icon\">format_strikethrough</mwc-icon>\r\n                      <h1 class=\"h1 !text-red-400\">New Connection Type</h1>\r\n                      <h3 class=\"h3\">Create New Connection Type!</h3>\r\n                    </label>\r\n                  </header>\r\n                  <form method=\"post\" action=\"#\" class=\"form mt-0\" make-general-posts=\"user-connection-account\">\r\n                    <div class=\"container my-4\">\r\n                      <div class=\"row justify-center\">\r\n\r\n                        <div class=\"col-md-6 col-lg-6\">\r\n                          <h4 class=\"font-semibold my-2\">Select Member</h4>\r\n                          <select-input class=\"w-100\" id=\"memberId\" name=\"memberId\" label=\"Select Member\"\r\n                            .ajaxFetchProcessResponse=\"${this.processClientUserSearch1}\" startSearchPage=\"${this.startSearchPage1}\"\r\n                            .ajaxHeader=\"${ajaxHeader}\" .ajaxFetchUrlParams=\"${this.ajaxFetchUrlParams1}\"\r\n                            ajaxFetchUrl=\"${CONSTANTS.URLS.AKWAABA_API_BASE_URL}members/user/search\"></select-input>\r\n                        </div>\r\n\r\n                        <div class=\"col-md-6 col-lg-6\">\r\n                          <h4 class=\"font-semibold my-2\">Select Connection <span class=\"text-akwaaba-orange-light\">Account to be connected</span></h4>\r\n                          <select-input class=\"w-100\" id=\"connectionId\" name=\"connectionId\" label=\"Select Connection\"\r\n                            .ajaxFetchProcessResponse=\"${this.processClientUserSearch2}\" startSearchPage=\"${this.startSearchPage2}\"\r\n                            .ajaxHeader=\"${ajaxHeader}\" .ajaxFetchUrlParams=\"${this.ajaxFetchUrlParams2}\"\r\n                            ajaxFetchUrl=\"${CONSTANTS.URLS.AKWAABA_API_BASE_URL}members/user/search\"></select-input>\r\n                        </div>\r\n                        <div class=\"col-md-6 col-lg-6\">\r\n                          <h4 class=\"font-semibold my-2\">Select Connection Type</h4>\r\n                          <mwc-select name=\"type\" class=\"w-full\" id=\"type\" label=\"Select Connection Type\" outlined required>\r\n                            <mwc-list-item value=\"0\">Select Connection Type</mwc-list-item>\r\n                            ${this._connection_types.map((value) => {\r\n                              // console.log({ \"schedule.type\": schedule.type, \"value.id\": value.id });\r\n                              return html`<mwc-list-item value=\"${value.id}\">${value.type}</mwc-list-item>`;\r\n                            })}\r\n                          </mwc-select>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row justify-content-center\">\r\n                      <div class=\"col-md-12 col-lg-12\">\r\n                        <div class=\"form-input-container\">\r\n                          <mwc-button label=\"Add Connection\" raised class=\"button\" @click=\"${this.submitForm}\">\r\n                          </mwc-button>\r\n                        </div>\r\n        \r\n                        <div class=\"flex form-input-container items-center text-center\">\r\n                          <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                          <label class=\"block font-medium text-sm text-gray-600 w-full\">\r\n                            Lets go digital...\r\n                          </label>\r\n                          <hr class=\"border-gray-300 border-1 w-full rounded-md\">\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } else {\r\n      return nothing;\r\n    }\r\n  }\r\n\r\n  private get toggle_showing_button() {\r\n    if (this.showing) {\r\n      return html`\r\n        <mwc-button @click=\"${this.toggle_showing_button_action_hide}\" class=\"button warning\" raised label=\"Hide Add Form\">\r\n        </mwc-button>\r\n      `;\r\n    } else {\r\n      return html`\r\n        <mwc-button @click=\"${this.toggle_showing_button_action_show}\" class=\"button success\" raised label=\"Show Add Form\">\r\n        </mwc-button>\r\n      `;\r\n    }\r\n  }\r\n\r\n  private toggle_showing_button_action_show(e: any) {\r\n    e.preventDefault();\r\n    this.showing = true;\r\n  }\r\n\r\n  private toggle_showing_button_action_hide(e: any) {\r\n    e.preventDefault();\r\n    this.showing = false;\r\n  }\r\n\r\n  private processClientUserSearch1(data: any, params: QueryOptions): SelectInputProcessedAjaxResponse_I {\r\n    params.page = params.page || 0;\r\n    const TOTAL = data.count,\r\n      RESULTS = data.results,\r\n      SELECTOR = document.querySelector('[id=\"memberId\"]');\r\n    console.log({ data, params, RESULTS, SELECTOR });\r\n\r\n    let processedData: { id: number; text: string; }[] = [];\r\n    if (TOTAL > 0) {\r\n      var _data = RESULTS;\r\n      // console.log({ \"smbfl-_data\": _data });\r\n      for (let i = 0; i < _data.length; i++) {\r\n        const item = _data[i];\r\n        const id = item['id'];\r\n        const fullName = item['firstname'] + \" \" + item['surname'];\r\n        const _new = {\r\n          id: id,\r\n          text: fullName,\r\n        }\r\n        if (!processedData.includes(_new)) {\r\n          processedData.push(_new)\r\n        }\r\n      }\r\n    }\r\n    // console.log({processedData});\r\n    \r\n\r\n\r\n    return {\r\n      results: processedData,\r\n      total: TOTAL,\r\n      // @ts-ignore\r\n      totalShowing: SELECTOR.totalShowing,\r\n    };\r\n  }\r\n\r\n  private processClientUserSearch2(data: any, params: QueryOptions): SelectInputProcessedAjaxResponse_I {\r\n    params.page = params.page || 0;\r\n    const TOTAL = data.count,\r\n      RESULTS = data.results,\r\n      SELECTOR = document.querySelector('[id=\"connectionId\"]');\r\n    console.log({ data, params, RESULTS, SELECTOR });\r\n\r\n    let processedData: { id: number; text: string; }[] = [];\r\n    if (TOTAL > 0) {\r\n      var _data = RESULTS;\r\n      // console.log({ \"smbfl-_data\": _data });\r\n      for (let i = 0; i < _data.length; i++) {\r\n        const item = _data[i];\r\n        const id = item['id'];\r\n        const fullName = item['firstname'] + \" \" + item['surname'];\r\n        const _new = {\r\n          id: id,\r\n          text: fullName,\r\n        }\r\n        if (!processedData.includes(_new)) {\r\n          processedData.push(_new)\r\n        }\r\n      }\r\n    }\r\n    // console.log({processedData});\r\n\r\n    return {\r\n      results: processedData,\r\n      total: TOTAL,\r\n      // @ts-ignore\r\n      totalShowing: SELECTOR.totalShowing,\r\n    };\r\n  }\r\n\r\n  private get ajaxFetchUrlParams1(): SelectInputProcessedAjaxUrlParam_I[] {\r\n    return [\r\n      { param: \"\", value: \"\" }\r\n    ]\r\n  }\r\n\r\n  private get ajaxFetchUrlParams2(): SelectInputProcessedAjaxUrlParam_I[] {\r\n    return [\r\n      { param: \"\", value: \"\" }\r\n    ]\r\n  }\r\n\r\n  private async getConnectionTypes() {\r\n    const _networkResponse = await GET_UserConnectionType<UserConnectionType_I>(null);\r\n\r\n    let __connection_types: UserConnectionType_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __connection_types.push({ id: 0, type: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const data: any[] = _networkResponse.response.data;\r\n\r\n        const DATA: UserConnectionType_I[] = data.map(value => {\r\n          return UserConnectionType_S(value)\r\n        });\r\n        // console.log({DATA});\r\n        __connection_types = DATA;\r\n      }\r\n    }\r\n    this._connection_types = [...this._connection_types, ...__connection_types];\r\n  }\r\n\r\n  async submitForm(e: PointerEvent) {\r\n    e.preventDefault();\r\n    // console.log({ e });\r\n    await POST_UserConnectionAccount();\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n","import { LitElement, html, css, TemplateResult } from 'lit';\r\nimport { customElement, property, query, } from 'lit/decorators.js';\r\nimport \"@material/mwc-icon\";\r\nimport \"@material/mwc-icon-button\";\r\nimport \"../../../../assets/styles/views/home/dashboard.scss\";\r\nimport { DELETE_UserConnectionAccount } from '@@addons/network/members/connections/accounts/delete';\r\nimport { UserConnectionAccount_I } from '@@addons/interfaces/members/connections/accounts';\r\nimport { FilterFieldBox } from '@@addons/classes/filter_field_box';\r\nimport { CONSTANTS } from '@@addons/constants';\r\nimport { getUserLoginInfoCookie } from '@@addons/functions/login';\r\nimport { urlQueryParams, urlQueryParamsJoin } from '@@addons/functions/url_query_params';\r\nimport { SelectInputProcessedAjaxResponse_I, SelectInputProcessedAjaxUrlParam_I } from '@@addons/interfaces/form/select-input';\r\nimport { Button } from '@material/mwc-button';\r\nimport { QueryOptions } from 'select2';\r\nimport '@@widgets/datatables';\r\nimport '@@interfaces/datatables';\r\nimport \"@material/mwc-select\";\r\nimport '@@addons/widgets/form/new/select';\r\nimport { UserConnectionType_I, UserConnectionType_S } from '@@addons/interfaces/members/connections/types';\r\nimport { GET_UserConnectionType } from '@@addons/network/members/connections/types';\r\n\r\n\r\n@customElement(\"pdb-connections-accounts-view\")\r\nexport class PdbConnectionsAccountsView extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @query('[filter-section-context=\"btn\"]')\r\n  private filterSectionContextBtn: Button;\r\n\r\n  @query('[filter-section-context=\"container\"]')\r\n  private filterSectionContextContainer: Element;\r\n\r\n  @query('[make-general-posts=\"submit_filter_form\"]')\r\n  private filterSectionContextForm: HTMLFormElement;\r\n\r\n  @property({ type: Array })\r\n  private _connection_accounts: UserConnectionAccount_I[] = [];\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage1: number = 0;\r\n\r\n  @property({ type: Number })\r\n  private startSearchPage2: number = 0;\r\n\r\n  private filterBox: FilterFieldBox;\r\n\r\n  @property({ type: Array })\r\n  private _connection_types: UserConnectionType_I[] = [];\r\n\r\n  @property({ type: String })\r\n  private datatablePathUrl: string = \"members/user-connection-account\";\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    this.filterBox = new FilterFieldBox({\r\n      selectors: {\r\n        container: this.filterSectionContextContainer,\r\n        form: this.filterSectionContextForm,\r\n        filterSectionContextBtn: this.filterSectionContextBtn,\r\n      }\r\n    });\r\n\r\n    await this.getConnectionTypes();\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n\r\n    if (this._connection_accounts === null) {\r\n      return html`\r\n        <div class=\"main-container\">\r\n          <div class=\"flex justify-center\">\r\n            <mwc-circular-progress indeterminate></mwc-circular-progress>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n    if (this._connection_accounts === undefined) {\r\n      return html`\r\n        <div class=\"main-container\">\r\n          <div class=\"flex justify-center\">\r\n            <h4 class=\"text-red-600 text-lg\">\r\n              <span class=\"font-bold\">Schedule </span>: undefined error</h4>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    return html`\r\n      <span class=\"flex flex-row md:flex-col w-100\"></span>\r\n      <div class=\"block my-1\">\r\n        <mwc-button icon=\"open_with\" label=\"Filters\" raised class=\"primary mt-1\"\r\n          filter-section-context=\"btn\" @click=\"${this.filterBox.toggleFilterFields}\">\r\n        </mwc-button>\r\n      </div>\r\n      <div class=\"block my-1\">\r\n        ${this.filterForm}\r\n      </div>\r\n      <div class=\"block my-1 overflow-x-scroll\">\r\n        <hr class=\"my-2\" />\r\n        ${this.table}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  firstUpdated() {\r\n    this.filterBox = new FilterFieldBox({\r\n      selectors: {\r\n        container: this.filterSectionContextContainer,\r\n        form: this.filterSectionContextForm,\r\n        filterSectionContextBtn: this.filterSectionContextBtn,\r\n      }, unmutableInputNames: [],\r\n    });\r\n  }\r\n\r\n  private get filterForm() {\r\n    let returnHtml = html``;\r\n    const _urlQueryParams = urlQueryParams(),\r\n      filterNameId_filter_memberId = \"memberId\",\r\n      filterNameId_filter_connectionId = \"connectionId\",\r\n      filterNameId_filter_type = \"type\";\r\n\r\n    let filterNameId_filter_memberIdVal: string = null,\r\n      filterNameId_filter_connectionIdVal: string = null,\r\n      filterNameId_filter_typeVal: string = null;\r\n\r\n    let ajaxHeader: { Authorization?: string } = {};\r\n    // const _get_cookie = base64Decode(get_cookie('client_tokenLogin'));\r\n    const _get_cookie = getUserLoginInfoCookie();\r\n    ajaxHeader.Authorization = \"Token \" + _get_cookie.token;\r\n\r\n    for (const key in _urlQueryParams) {\r\n      let value = String(_urlQueryParams[key]);\r\n      value = value === \"\" ? null : value;\r\n      if (key === filterNameId_filter_memberId) {\r\n        filterNameId_filter_memberIdVal = value;\r\n      }\r\n      if (key === filterNameId_filter_connectionId) {\r\n        filterNameId_filter_connectionIdVal = value;\r\n      }\r\n      if (key === filterNameId_filter_type) {\r\n        filterNameId_filter_typeVal = value;\r\n      }\r\n    }\r\n\r\n    const memberField = html`\r\n      <div class=\"col-xl-4 col-md-6\">\r\n        <h4 class=\"font-semibold my-2\">Select Member</h4>\r\n          <select-input class=\"w-100\" id=\"memberId\" name=\"memberId\" label=\"Select Member\"\r\n            .ajaxFetchProcessResponse=\"${this.processClientUserSearch1}\" startSearchPage=\"${this.startSearchPage1}\"\r\n            .ajaxHeader=\"${ajaxHeader}\" .ajaxFetchUrlParams=\"${this.ajaxFetchUrlParams1}\"\r\n            ajaxFetchUrl=\"${CONSTANTS.URLS.AKWAABA_API_BASE_URL}members/user/search\"></select-input>\r\n      </div>`;\r\n\r\n    const connectionField = html`\r\n      <div class=\"col-xl-4 col-md-6\">\r\n        <h4 class=\"font-semibold my-2\">Select Connection</h4>\r\n          <select-input class=\"w-100\" id=\"connectionId\" name=\"connectionId\" label=\"Select Connection\"\r\n            .ajaxFetchProcessResponse=\"${this.processClientUserSearch2}\" startSearchPage=\"${this.startSearchPage2}\"\r\n            .ajaxHeader=\"${ajaxHeader}\" .ajaxFetchUrlParams=\"${this.ajaxFetchUrlParams2}\"\r\n            ajaxFetchUrl=\"${CONSTANTS.URLS.AKWAABA_API_BASE_URL}members/user/search\"></select-input>\r\n      </div>`;\r\n\r\n    const typeField = html`\r\n      <div class=\"col-xl-4 col-md-6\">\r\n        <h4 class=\"font-semibold my-2\">Select Connection Type</h4>\r\n        <mwc-select name=\"type\" class=\"w-full\" id=\"type\" label=\"Select Connection Type\" outlined required>\r\n          <mwc-list-item value=\"0\">Select Connection Type</mwc-list-item>\r\n          ${this._connection_types.map((item) => {\r\n            if (filterNameId_filter_typeVal === null) {\r\n              return html`<mwc-list-item value=\"${item.id}\">${item.type}</mwc-list-item>`;\r\n            } else {\r\n              if (Number(filterNameId_filter_typeVal) === item.id) {\r\n                return html`<mwc-list-item value=\"${item.id}\" selected>${item.type}</mwc-list-item>`;\r\n              } else {\r\n                return html`<mwc-list-item value=\"${item.id}\">${item.type}</mwc-list-item>`;\r\n              }\r\n            }\r\n          })}\r\n        </mwc-select>\r\n      </div>`;\r\n\r\n    returnHtml = html`<form method=\"get\" class=\"form\" make-general-posts=\"submit_filter_form\" filter-section-context=\"container\" hidden>\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          ${memberField} ${connectionField} ${typeField}\r\n          <div class=\"col-xl-12 col-md-10\">\r\n            <div class=\"form-input-container mt-1\">\r\n              <mwc-button label=\"Clear\" @click=\"${this.filterBox.clear_filter}\"></mwc-button>\r\n              <mwc-button label=\"Filter\" raised @click=\"${this.filterBox.submit}\"></mwc-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </form>`\r\n    return returnHtml;\r\n  }\r\n\r\n  private processClientUserSearch1(data: any, params: QueryOptions): SelectInputProcessedAjaxResponse_I {\r\n    params.page = params.page || 0;\r\n    const TOTAL = data.count,\r\n      RESULTS = data.results,\r\n      SELECTOR = document.querySelector('[id=\"memberId\"]');\r\n    console.log({ data, params, RESULTS, SELECTOR });\r\n\r\n    let processedData: { id: number; text: string; }[] = [];\r\n    if (TOTAL > 0) {\r\n      var _data = RESULTS;\r\n      // console.log({ \"smbfl-_data\": _data });\r\n      for (let i = 0; i < _data.length; i++) {\r\n        const item = _data[i];\r\n        const id = item['id'];\r\n        const fullName = item['firstname'] + \" \" + item['middlename'] + \" \" + item['surname'];\r\n        const _new = {\r\n          id: id,\r\n          text: fullName,\r\n        }\r\n        if (!processedData.includes(_new)) {\r\n          processedData.push(_new)\r\n        }\r\n      }\r\n    }\r\n    // console.log({processedData});\r\n\r\n\r\n\r\n    return {\r\n      results: processedData,\r\n      total: TOTAL,\r\n      // @ts-ignore\r\n      totalShowing: SELECTOR.totalShowing,\r\n    };\r\n  }\r\n\r\n  private processClientUserSearch2(data: any, params: QueryOptions): SelectInputProcessedAjaxResponse_I {\r\n    params.page = params.page || 0;\r\n    const TOTAL = data.count,\r\n      RESULTS = data.results,\r\n      SELECTOR = document.querySelector('[id=\"connectionId\"]');\r\n    console.log({ data, params, RESULTS, SELECTOR });\r\n\r\n    let processedData: { id: number; text: string; }[] = [];\r\n    if (TOTAL > 0) {\r\n      var _data = RESULTS;\r\n      // console.log({ \"smbfl-_data\": _data });\r\n      for (let i = 0; i < _data.length; i++) {\r\n        const item = _data[i];\r\n        const id = item['id'];\r\n        const fullName = item['firstname'] + \" \" + item['surname'];\r\n        const _new = {\r\n          id: id,\r\n          text: fullName,\r\n        }\r\n        if (!processedData.includes(_new)) {\r\n          processedData.push(_new)\r\n        }\r\n      }\r\n    }\r\n    // console.log({processedData});\r\n\r\n    return {\r\n      results: processedData,\r\n      total: TOTAL,\r\n      // @ts-ignore\r\n      totalShowing: SELECTOR.totalShowing,\r\n    };\r\n  }\r\n\r\n  private get ajaxFetchUrlParams1(): SelectInputProcessedAjaxUrlParam_I[] {\r\n    return [\r\n      { param: \"\", value: \"\" }\r\n    ]\r\n  }\r\n\r\n  private get ajaxFetchUrlParams2(): SelectInputProcessedAjaxUrlParam_I[] {\r\n    return [\r\n      { param: \"\", value: \"\" }\r\n    ]\r\n  }\r\n\r\n  private get __tableHeaders(): DataTables_ColumnSettings_I[] {\r\n    return [\r\n      { title: 'Connection', },\r\n      { title: 'Action', },\r\n    ];\r\n  }\r\n\r\n  private get __tableBody(): DataTables_ColumnSettings_I[][] {\r\n    return [];\r\n  }\r\n\r\n  private get __tableFoot(): DataTables_ColumnSettings_I[] {\r\n    return [\r\n      { title: 'Connection', },\r\n      { title: 'Action', },\r\n    ];\r\n  }\r\n\r\n  private get table(): TemplateResult {\r\n    let URL = CONSTANTS.URLS.AKWAABA_API_BASE_URL + \"\" + this.datatablePathUrl + \"?datatable_plugin\";\r\n\r\n    const _urlQueryString = this.urlQueryString;\r\n    // console.log({_urlQueryString});\r\n    URL = URL + _urlQueryString;\r\n    // console.log({URL});\r\n\r\n    const __dataTable = this.__dataTable(URL);\r\n    let ajaxHeader: { Authorization?: string } = {};\r\n    const _get_cookie = getUserLoginInfoCookie();\r\n    ajaxHeader.Authorization = \"Token \" + _get_cookie.token;\r\n    return html`\r\n      <datatables-new .datatable=\"${__dataTable}\" .ajaxHeader=\"${ajaxHeader}\" .dt_body=\"${this.__tableBody}\"\r\n        .dt_foot=\"${this.__tableFoot}\" .dt_head=\"${this.__tableHeaders}\"></datatables-new>\r\n    `;\r\n  }\r\n\r\n  private renderMemberInfo(data: any, type: any, connectionInfo: UserConnectionAccount_I) {\r\n    // console.log({connectionInfo});\r\n    const memberId = connectionInfo.memberId;\r\n    const connectionId = connectionInfo.connectionId;\r\n    return `\r\n      <div class=\"flex flex-col\">\r\n        <div class=\"flex flex-col lg:flex-row m-1 justify-start\">\r\n          <div class=\"flex\">\r\n            <h6 class=\"whitespace-nowrap text-sm font-bold mr-1\">Connection Name</h6>\r\n            <p class=\"whitespace-nowrap text-sm ml-1\">${connectionId.firstname} ${connectionId.middlename}\r\n              ${connectionId.surname}</p>\r\n          </div>\r\n          <div class=\"m-1\"><mwc-icon>directions<mwc-icon/></div>\r\n          <div class=\"flex\">\r\n            <h6 class=\"whitespace-nowrap text-sm font-bold mr-1\">Member Name</h6>\r\n            <p class=\"whitespace-nowrap text-sm ml-1\">${memberId.firstname} ${memberId.middlename} ${memberId.surname}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private renderClockInInfo(data: any, type: any, connectionInfo: UserConnectionAccount_I) {\r\n    // console.log({connectionInfo});\r\n    const connectionType = connectionInfo.type;    \r\n    return `\r\n      <div class=\"justify-center content-center\">\r\n        <mwc-icon-button class=\"ml-1 danger\" icon=\"delete_forever\" \r\n          delete-this-item=\"${connectionInfo.id}\" >\r\n        </mwc-icon-button>\r\n        <div class=\"flex flex-col\">\r\n          <h6 class=\"whitespace-nowrap text-sm font-bold mr-1\">Connection Type:</h6>\r\n          <div class=\"flex flex-col\">\r\n            <p class=\"whitespace-nowrap text-sm ml-1\">${connectionType.type}</p>\r\n            <p class=\"text-xs ml-1 whitespace-pre-wrap\">${connectionType.description}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get urlQueryString() {\r\n    const _urlQueryParams = urlQueryParams(),\r\n      filterNameId_filter_memberId = \"memberId\",\r\n      filterNameId_filter_connectionId = \"connectionId\";\r\n\r\n    let newObject: any = {};\r\n\r\n    for (const key in _urlQueryParams) {\r\n      let value = String(_urlQueryParams[key]);\r\n      if ((key === filterNameId_filter_memberId) || (key === filterNameId_filter_connectionId)) {\r\n        // console.log({value, });\r\n\r\n        newObject[key] = value;\r\n      }\r\n    }\r\n\r\n    let _urlQueryParamsJoin = urlQueryParamsJoin(newObject);\r\n\r\n    return (_urlQueryParamsJoin.length === 0)\r\n      ? _urlQueryParamsJoin : \"&\" + _urlQueryParamsJoin;\r\n  }\r\n\r\n  private __dataTable(url: string): DataTables_Settings_I {\r\n    const __this = this;\r\n\r\n    console.log({ \"__this\": __this, url });\r\n\r\n    let dataTable: DataTables_Settings_I = {\r\n      'order': [[0, 'desc']],\r\n      'processing': true,\r\n      'serverSide': true,\r\n      'ajax': {\r\n        url: url,\r\n        dataSrc: 'data',\r\n        apiType: \"akwaabaApp\",\r\n      },\r\n      \"columns\": [\r\n        {\r\n          data: 'id',\r\n          render: (data: any, type: any, connectionInfo: UserConnectionAccount_I) => __this.renderMemberInfo(data, type, connectionInfo),\r\n          orderable: true\r\n        },\r\n        {\r\n          data: 'inTime',\r\n          render: (data: any, type: any, connectionInfo: UserConnectionAccount_I) => __this.renderClockInInfo(data, type, connectionInfo),\r\n          orderable: true\r\n        },\r\n\r\n      ],\r\n      'columnDefs': [\r\n        {\r\n          targets: ['_all'],\r\n          className: 'mdc-data-table__cell',\r\n          // @ts-ignore\r\n          checkboxes: {\r\n            selectRow: true\r\n          },\r\n        }\r\n      ],\r\n      'lengthMenu': [10, 25, 50, 100, 500, 1000],\r\n      \"drawCallback\": async function (e) {\r\n        const aoData = e.aoData;\r\n        // console.log({ aoData })\r\n        __this.deleteConnectionAction();\r\n      },\r\n      \"responsive\": false,\r\n      \"dom\": 'Blfrtip',\r\n      buttons: [\r\n        'selected',\r\n        'selectedSingle',\r\n        'selectAll',\r\n        'selectNone',\r\n        'selectRows',\r\n        'selectColumns',\r\n        'selectCells',\r\n        'pdf',\r\n        'excel',\r\n        'copy',\r\n        'csv',\r\n      ],\r\n      select: true,\r\n      // \"select\": {\r\n      //   \"style\": \"multi\"\r\n      // },\r\n    };\r\n    return dataTable;\r\n  }\r\n\r\n  private async getConnectionTypes() {\r\n    const _networkResponse = await GET_UserConnectionType<UserConnectionType_I>(null);\r\n\r\n    let __connection_types: UserConnectionType_I[] = [];\r\n\r\n    if (_networkResponse === null) {\r\n      __connection_types.push({ id: 0, type: \"**NOT FOUND**\" });\r\n    } else {\r\n      if ((_networkResponse.response.success === true) && ('length' in _networkResponse.response.data)) {\r\n        const data: any[] = _networkResponse.response.data;\r\n\r\n        const DATA: UserConnectionType_I[] = data.map(value => {\r\n          return UserConnectionType_S(value)\r\n        });\r\n        // console.log({DATA});\r\n        __connection_types = DATA;\r\n      }\r\n    }\r\n    this._connection_types = [...this._connection_types, ...__connection_types];\r\n  }\r\n\r\n  private deleteConnectionAction() {\r\n    document.querySelectorAll('[delete-this-item]').forEach((btn) => {\r\n      console.log({btn})\r\n      btn.addEventListener('click', (e) => {\r\n        console.log({e})\r\n        // e.preventDefault();\r\n        this.deleteConnection(e);\r\n      })\r\n    });\r\n  }\r\n\r\n  async deleteConnection(e: Event) {\r\n    e.preventDefault();\r\n    // console.log({ e });\r\n\r\n    // @ts-ignore\r\n    const userConnectionId = Number(e.currentTarget.getAttribute('delete-this-item'));\r\n\r\n    await DELETE_UserConnectionAccount(userConnectionId);\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["__swalStyle","https_swal_error_format","error","addStyle","Array","isArray","errorMsg","forEach","data","Error","UserConnectionType_S","id","Number","type","String","clientId","description","createdBy","creationDate","Date","lastUpdatedBy","lastUpdateDate","DELETE_UserConnectionAccount","ID","_get_cookie","getUserLoginInfoCookie","url","CONSTANTS","formData","title","text","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","http","method","body","JSON","stringify","headers","Authorization","token","then","HTTP","networkCallRes","NetWorkCallResponses","_RESPONSE","response","unknownError","length","errors","e","err","push","res","console","errorHttp","postForm","catch","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","value","Object","VALUE","message","success","setTimeout","window","location","reload","POST_UserConnectionAccount","formContainer","document","querySelector","FormData","errormsg","GET_UserConnectionType","PdbConnectionsAccountsAdd","LitElement","constructor","super","showing","startSearchPage1","startSearchPage2","_connection_types","connectedCallback","this","getConnectionTypes","disconnectedCallback","render","html","show_form","toggle_showing_button","ajaxHeader","processClientUserSearch1","ajaxFetchUrlParams1","processClientUserSearch2","ajaxFetchUrlParams2","map","submitForm","nothing","toggle_showing_button_action_hide","toggle_showing_button_action_show","preventDefault","params","page","TOTAL","count","RESULTS","results","SELECTOR","log","processedData","_data","i","item","_new","includes","total","totalShowing","param","_networkResponse","__connection_types","firstUpdated","createRenderRoot","styles","css","property","Boolean","customElement","PdbConnectionsAccountsView","_connection_accounts","datatablePathUrl","filterBox","FilterFieldBox","selectors","container","filterSectionContextContainer","form","filterSectionContextForm","filterSectionContextBtn","undefined","toggleFilterFields","filterForm","table","unmutableInputNames","returnHtml","_urlQueryParams","urlQueryParams","filterNameId_filter_memberIdVal","filterNameId_filter_connectionIdVal","filterNameId_filter_typeVal","key","memberField","connectionField","typeField","clear_filter","submit","__tableHeaders","__tableBody","__tableFoot","URL","urlQueryString","__dataTable","renderMemberInfo","connectionInfo","memberId","connectionId","firstname","middlename","surname","renderClockInInfo","connectionType","newObject","_urlQueryParamsJoin","urlQueryParamsJoin","__this","dataSrc","apiType","orderable","targets","className","checkboxes","selectRow","aoData","deleteConnectionAction","buttons","select","querySelectorAll","btn","addEventListener","deleteConnection","userConnectionId","currentTarget","getAttribute","query","Button","Element","HTMLFormElement"],"sourceRoot":""}