{"version":3,"file":"../../../client_dashboard/assets/v2/dev-files/js/src_addons_functions_login_index_ts-src_addons_network_attendance_meeting_event_link-types_in-46a935.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/functions/login/index.ts","webpack://webpackNumbers/./src/addons/interfaces/network_calls/login/index.ts","webpack://webpackNumbers/./src/addons/network/attendance/meeting_event_link-types/index.ts","webpack://webpackNumbers/./src/addons/network/attendance/meeting_event_locations/index.ts","webpack://webpackNumbers/./src/addons/network/attendance/meeting_event_member_types/index.ts","webpack://webpackNumbers/./src/addons/network/attendance/meeting_event_types/index.ts"],"sourcesContent":["import { UserLoginInfo_I, userLoginInfo_S } from \"@@addons/interfaces/network_calls/login\";\r\nimport { base64Decode, base64Encode } from \"../base64\";\r\nimport { get_cookie, set_cookies } from \"../cookies\";\r\n\r\nconst userLoginInfo = 'pdb-client-user';\r\n\r\nexport const setUserLoginInfoCookie = (data: UserLoginInfo_I) => {\r\n  const stringData = JSON.stringify(data);\r\n  // @ts-ignore\r\n  window['supersecret'] = {\r\n    unknowable: {\r\n      ops: {\r\n        email: data.user.email, id: data.user.id, cookieName: userLoginInfo\r\n      }\r\n    }\r\n  };\r\n  set_cookies(userLoginInfo, \"\", -1);\r\n  set_cookies(userLoginInfo, base64Encode(stringData), 3500);\r\n}\r\n\r\nexport const LogUserOut = () => {\r\n  set_cookies(userLoginInfo, \"\", -1);\r\n}\r\n\r\nexport const getUserLoginInfoCookie = (): UserLoginInfo_I => {\r\n  // console.log({ \"get_cookie(userLoginInfo)\": get_cookie(userLoginInfo) });\r\n  const rawCookie = get_cookie(userLoginInfo);\r\n  if (rawCookie === \"\") {\r\n    return null;\r\n  } else {\r\n    const _cookie = base64Decode(get_cookie(userLoginInfo)),\r\n      cookie = JSON.parse(_cookie);\r\n  \r\n    return userLoginInfo_S(cookie);\r\n  }\r\n}\r\n","import { ClientUserShort_I } from \"@@addons/interfaces/clients/users\";\r\n\r\nexport interface UserLoginInfo_I {\r\n  expiry: Date,\r\n  token: string,\r\n  user: ClientUserShort_I,\r\n}\r\n\r\nexport function userLoginInfo_S(data: any): UserLoginInfo_I {\r\n  const user = data['user'];\r\n  const userLoginInfo_S = {\r\n    expiry: new Date(data['expiry']),\r\n    token: String(data['token']),\r\n    user: {\r\n      id: Number(user['id']),\r\n      accountId: Number(user['accountId']),\r\n      branchId: Number(user['branchId']),\r\n      firstname: String(user['firstname']),\r\n      surname: String(user['surname']),\r\n      phone: String(user['phone']),\r\n      email: String(user['email']),\r\n      profilePicture: String(user['profilePicture']),\r\n    },\r\n  };\r\n\r\n  return userLoginInfo_S;\r\n}\r\n","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { get_cookie } from \"@@addons/functions/cookies\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { base64Decode } from \"@@addons/functions/base64\";\r\nimport { LoginTokenType_I } from \"@@addons/interfaces/network_calls/login/login_token\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { verifyToken } from \"@@addons/functions/login/main\";\r\n\r\nexport async function GET_MeetingEventLinkTypes<Type>(type: Number = null, loginTokenType: LoginTokenType_I = \"client_tokenLogin\") {\r\n  \r\n  // @ts-ignore\r\n  const WsUoI = String(window.supersecret.unknowable.ops.id);\r\n  // @ts-ignore\r\n  const WsUoE = String(window.supersecret.unknowable.ops.email);\r\n\r\n  await verifyToken(WsUoE, WsUoI, loginTokenType);\r\n  const _get_cookie = base64Decode(get_cookie(loginTokenType));\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/schedule/link-types'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { get_cookie } from \"@@addons/functions/cookies\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { base64Decode } from \"@@addons/functions/base64\";\r\nimport { LoginTokenType_I } from \"@@addons/interfaces/network_calls/login/login_token\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { verifyToken } from \"@@addons/functions/login/main\";\r\n\r\nexport async function GET_MeetingEventLocations<Type>(type: Number = null, loginTokenType: LoginTokenType_I = \"client_tokenLogin\") {\r\n  \r\n  // @ts-ignore\r\n  const WsUoI = String(window.supersecret.unknowable.ops.id);\r\n  // @ts-ignore\r\n  const WsUoE = String(window.supersecret.unknowable.ops.email);\r\n\r\n  await verifyToken(WsUoE, WsUoI, loginTokenType);\r\n  const _get_cookie = base64Decode(get_cookie(loginTokenType));\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/schedule/locations'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { get_cookie } from \"@@addons/functions/cookies\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { base64Decode } from \"@@addons/functions/base64\";\r\nimport { LoginTokenType_I } from \"@@addons/interfaces/network_calls/login/login_token\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { verifyToken } from \"@@addons/functions/login/main\";\r\n\r\nexport async function GET_MeetingEventMemberTypes<Type>(type: Number = null, loginTokenType: LoginTokenType_I = \"client_tokenLogin\") {\r\n  \r\n  // @ts-ignore\r\n  const WsUoI = String(window.supersecret.unknowable.ops.id);\r\n  // @ts-ignore\r\n  const WsUoE = String(window.supersecret.unknowable.ops.email);\r\n\r\n  await verifyToken(WsUoE, WsUoI, loginTokenType);\r\n  const _get_cookie = base64Decode(get_cookie(loginTokenType));\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/schedule/member-types'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { get_cookie } from \"@@addons/functions/cookies\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { base64Decode } from \"@@addons/functions/base64\";\r\nimport { LoginTokenType_I } from \"@@addons/interfaces/network_calls/login/login_token\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { verifyToken } from \"@@addons/functions/login/main\";\r\n\r\nexport async function GET_MeetingEventTypes<Type>(type: Number = null, loginTokenType: LoginTokenType_I = \"client_tokenLogin\") {\r\n  \r\n  // @ts-ignore\r\n  const WsUoI = String(window.supersecret.unknowable.ops.id);\r\n  // @ts-ignore\r\n  const WsUoE = String(window.supersecret.unknowable.ops.email);\r\n\r\n  await verifyToken(WsUoE, WsUoI, loginTokenType);\r\n  const _get_cookie = base64Decode(get_cookie(loginTokenType));\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/schedule/types'\r\n    + (type === null ? \"\" : \"/\" + type),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}"],"names":["userLoginInfo","setUserLoginInfoCookie","data","stringData","JSON","stringify","window","unknowable","ops","email","user","id","cookieName","set_cookies","base64Encode","LogUserOut","getUserLoginInfoCookie","get_cookie","_cookie","base64Decode","cookie","parse","userLoginInfo_S","expiry","Date","token","String","Number","accountId","branchId","firstname","surname","phone","profilePicture","GET_MeetingEventLinkTypes","type","loginTokenType","WsUoI","supersecret","WsUoE","verifyToken","_get_cookie","url","CONSTANTS","HTTP","http","method","headers","Authorization","NetWorkCallResponses","error","console","errorHttp","GET_MeetingEventLocations","GET_MeetingEventMemberTypes","GET_MeetingEventTypes"],"sourceRoot":""}