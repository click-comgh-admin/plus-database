{"version":3,"file":"../../../client_dashboard/assets/v2/dev-files/js/src_addons_classes_network_calls_response_ts-src_addons_functions_https_https_swal_error_format_ts.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/classes/network_calls/response.ts","webpack://webpackNumbers/./src/addons/functions/form_data_to_object/index.ts","webpack://webpackNumbers/./src/addons/functions/https/https_swal_error_format.ts"],"sourcesContent":["import { set_cookies_minutes } from '@@addons/functions/cookies';\r\nimport { formDataToJson } from '@@addons/functions/form_data_to_object';\r\nimport { NetworkCallHttp_I } from '@@addons/interfaces/network_calls/http';\r\nimport {\r\n  NetworkCallDatatableResponse_I, NetworkCallError_I,\r\n  NetworkCallPaginResponse_I, NetworkCallPostResponse_I,\r\n  NetworkCallResponseMethod_I, NetworkCallResponse_I,\r\n} from '@@addons/interfaces/network_calls/response';\r\n\r\nexport class NetWorkCallResponses<Type> {\r\n  constructor(method: NetworkCallResponseMethod_I, httpResponse: NetworkCallHttp_I, error: boolean = false, postForm: HTMLFormElement = null) {\r\n    const response = httpResponse.jsonData,\r\n      rawResponse = httpResponse.response;\r\n    this.postForm = postForm;\r\n    console.log({'method === \"post\"': method === \"post\", method, response, rawResponse, error});\r\n\r\n    if (httpResponse.response.ok) {\r\n      try {\r\n        // @ts-ignore\r\n        const cookieName = String(window.supersecret.unknowable.ops.cookieName);\r\n        set_cookies_minutes(`${cookieName}_date`, new Date().toUTCString(), 10);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    if (error) {\r\n      console.log({'method === \"post1\"': method === \"post\", method, response, rawResponse, error});\r\n      this.error(httpResponse.error);\r\n    } else {\r\n      console.log({'method === \"post\"': method === \"post\", method, response, rawResponse, error});\r\n      if (method === \"get\") {\r\n        this.get(response, rawResponse);\r\n      } else if (method === \"post\") {\r\n        console.log({method, response, rawResponse});\r\n        this.post(response, rawResponse);\r\n      } else if (method === \"post-file\") {\r\n        this.postFile(response, rawResponse);\r\n      } else if (method === \"put\") {\r\n        this.put(response, rawResponse);\r\n      } else if (method === \"patch\") {\r\n        this.patch(response, rawResponse);\r\n      } else if (method === \"delete\") {\r\n        this.delete(response, rawResponse);\r\n      }\r\n    }\r\n  }\r\n\r\n  public response: NetworkCallResponse_I<Type> | NetworkCallPostResponse_I = null;\r\n\r\n  public multipleResponse: Array<NetworkCallPostResponse_I> = null;\r\n\r\n  public paginResponse: NetworkCallPaginResponse_I<Type> = null;\r\n\r\n  public databaseResponse: NetworkCallDatatableResponse_I<Type> = null;\r\n\r\n  public postForm: HTMLFormElement = null;\r\n\r\n  private error(response: any | object) {\r\n    this.response = response;\r\n  }\r\n\r\n  private outputResponse(success: boolean, message: string | Array<any>,\r\n    data: Array<Type> | Type): NetworkCallResponse_I<Type> {\r\n    return { success: success, message: message, data: data };\r\n  }\r\n\r\n  private outputResponsePagin(output: any): NetworkCallPaginResponse_I<Type> {\r\n    return {\r\n      count: output.count, next: output.next, previous: output.previous,\r\n      results: output.results,\r\n    };\r\n  }\r\n\r\n  private outputResponseDatatable(output: any): NetworkCallDatatableResponse_I<Type> {\r\n    return {\r\n      data: output.data, datatable_plugin: output.datatable_plugin,\r\n      draw: output.draw, recordsFiltered: output.recordsFiltered,\r\n      recordsTotal: output.recordsTotal,\r\n    };\r\n  }\r\n\r\n  private outputErrorResponse(success: boolean, message: string | Array<NetworkCallError_I>,\r\n    nameError: Array<NetworkCallError_I>, unknownError: Array<NetworkCallError_I>, data: Array<any>): NetworkCallPostResponse_I {\r\n    return {\r\n      success: success, message: message, nameError: nameError,\r\n      unknownError: unknownError, data: data\r\n    };\r\n  }\r\n\r\n  private get(response: any | object, rawResponse: Response) {\r\n    let newResponse: NetworkCallResponse_I<Type>;\r\n    if (response.hasOwnProperty('success') && response.hasOwnProperty('message')\r\n      && response.hasOwnProperty('data')) {\r\n      newResponse = response;\r\n    } else if (response.hasOwnProperty('count') && response.hasOwnProperty('next')\r\n      && response.hasOwnProperty('previous') && response.hasOwnProperty('results')) {\r\n      this.paginResponse = this.outputResponsePagin(response);\r\n      return this.paginResponse;\r\n    } else if (response.hasOwnProperty('draw') && response.hasOwnProperty('recordsTotal')\r\n      && response.hasOwnProperty('recordsFiltered') && response.hasOwnProperty('data')) {\r\n      this.databaseResponse = this.outputResponseDatatable(response);\r\n      return this.databaseResponse;\r\n    } else if (response.hasOwnProperty('detail') && (rawResponse.status === 404)) {\r\n      newResponse = { data: [], message: response['detail'], success: false };\r\n    }\r\n\r\n    // console.log({ newResponse });\r\n\r\n\r\n    this.response = this.outputResponse(newResponse.success, newResponse.message, newResponse.data);\r\n  }\r\n  \r\n  postFile(response: any, rawResponse: Response) {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  private post(response: any | object, rawResponse: Response) {\r\n    console.log({response, rawResponse});\r\n\r\n    let newResponse: NetworkCallPostResponse_I;\r\n    if (response.hasOwnProperty('success') && response.hasOwnProperty('message')\r\n      && response.hasOwnProperty('data')) {\r\n      newResponse = response;\r\n    } else if (Array.isArray(response)) {\r\n      console.log({\"rawResponse.ok1\": rawResponse.ok});\r\n      if (rawResponse.ok) {\r\n        const SUCCESS_RESPONSE_MESSAGE = response[0]['SUCCESS_RESPONSE_MESSAGE'];\r\n        response.map((_response) => {\r\n          delete _response['SUCCESS_RESPONSE_MESSAGE'];\r\n          return _response;\r\n        });\r\n\r\n        this.response = this.outputResponse(true, SUCCESS_RESPONSE_MESSAGE, response);\r\n      } else {\r\n        let newResponses: NetworkCallPostResponse_I[] = [];\r\n        response.forEach((_response) => {\r\n          newResponse = this.postError(_response);\r\n          const _newResponse = this.outputErrorResponse(\r\n            newResponse.success, newResponse.message, newResponse.nameError,\r\n            newResponse.unknownError, newResponse.data\r\n          );\r\n          if (!newResponses.includes(_newResponse)) {\r\n            newResponses.push(_newResponse);\r\n          }\r\n        });\r\n        this.multipleResponse = newResponses;\r\n      }\r\n    } else {\r\n      console.log({\"rawResponse.ok2\": rawResponse.ok});\r\n      if (rawResponse.ok) {\r\n        const SUCCESS_RESPONSE_MESSAGE = response['SUCCESS_RESPONSE_MESSAGE'];\r\n        delete response['SUCCESS_RESPONSE_MESSAGE'];\r\n\r\n        this.response = this.outputResponse(true, SUCCESS_RESPONSE_MESSAGE, response);\r\n      } else {\r\n        newResponse = this.postError(response);\r\n        this.response = this.outputErrorResponse(\r\n          newResponse.success, newResponse.message, newResponse.nameError,\r\n          newResponse.unknownError, newResponse.data\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private postError(response: any | object): NetworkCallPostResponse_I {\r\n    const errorFields = this.postErrorFields(response),\r\n      nameErrorFields = this.postNamedErrorFields(errorFields),\r\n      nonNameErrorFields = this.postNonNamedErrorFields(errorFields);\r\n\r\n    const postErrorInputs = this.postErrorInputs(nameErrorFields, nonNameErrorFields);\r\n    return {\r\n      success: false, message: errorFields, nameError: postErrorInputs.nameErrorFields,\r\n      unknownError: postErrorInputs.nonNameErrorFields, data: response\r\n    }\r\n  }\r\n\r\n  private postErrorFields(response: any | object) {\r\n    // console.log({response});\r\n\r\n    let errors: Array<NetworkCallError_I> = [];\r\n    for (const key in response) {\r\n      if (Object.prototype.hasOwnProperty.call(response, key)) {\r\n        const RES = response[key];\r\n        const error: NetworkCallError_I = {\r\n          id: key, errors: RES\r\n        };\r\n\r\n        if (!errors.includes(error)) {\r\n          errors.push(error);\r\n        }\r\n      }\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  private postNamedErrorFields(errorFields: NetworkCallError_I[]) {\r\n    let errors: Array<NetworkCallError_I> = [];\r\n\r\n    errorFields.forEach((error) => {\r\n      if (error.id !== \"non_field_errors\") {\r\n        if (!errors.includes(error)) {\r\n          errors.push(error);\r\n        }\r\n      }\r\n    });\r\n    return errors;\r\n  }\r\n\r\n  private postNonNamedErrorFields(errorFields: NetworkCallError_I[]) {\r\n    let errors: Array<NetworkCallError_I> = [];\r\n\r\n    errorFields.forEach((error) => {\r\n      if (error.id === \"non_field_errors\") {\r\n        if (!errors.includes(error)) {\r\n          errors.push(error);\r\n        }\r\n      }\r\n    });\r\n    return errors;\r\n  }\r\n\r\n  private validateInput(input: Element) {\r\n    // console.log({ input, });\r\n    // console.log({ \"input.hasOwnProperty('mdcFoundation')\": input.hasOwnProperty('mdcFoundation') });\r\n\r\n    if (input.hasOwnProperty('mdcFoundation')) {\r\n      // @ts-ignore\r\n      input.setCustomValidity(\"\");\r\n      // @ts-ignore\r\n      input.isUiValid = true;\r\n      // @ts-ignore\r\n      input.validityTransform = (newValue, nativeValidity) => {\r\n        // console.log({ newValue, nativeValidity, });\r\n        if (nativeValidity.valid) {\r\n          return {};\r\n        } else {\r\n          return {\r\n            valid: false,\r\n            customError: true,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private postErrorInputs(nameErrorFields: NetworkCallError_I[], nonNameErrorFields: NetworkCallError_I[]) {\r\n    // console.log({ \"this.postForm\": this.postForm });\r\n    // console.log({ \"this.postForm.elements\": this.postForm.elements });\r\n\r\n    const _formDataToJson = JSON.parse(formDataToJson(new FormData(this.postForm)));\r\n    // console.log({ _formDataToJson });\r\n    for (const key in _formDataToJson) {\r\n      let input: Element;\r\n      try {\r\n        input = document.querySelector('[name=' + key + ']');\r\n      } catch (error) {\r\n        input = document.querySelector('[id=' + key.replace('[]', '') + ']');\r\n      }\r\n      this.validateInput(input);\r\n      input.addEventListener('change', (event) => {\r\n        this.validateInput(input);\r\n      });\r\n    }\r\n\r\n\r\n    nameErrorFields.forEach((error) => {\r\n      const inputs = document.querySelectorAll('[id=\"' + error.id + '\"]');\r\n      // console.log({ error, inputs });\r\n\r\n      inputs.forEach((input) => {\r\n        if (input.hasOwnProperty('mdcFoundation')) {\r\n          try {\r\n            // console.log({ input, \"error.errors\": error.errors, });\r\n            // console.log({\"_____typeof error.errors_____\": Array.isArray(error.errors) });\r\n            const errorErrors = error.errors;\r\n            if (Array.isArray(errorErrors)) {\r\n              // @ts-ignore\r\n              input.setCustomValidity(errorErrors.join('\\n'));\r\n            } else {\r\n              let _errorErrors: Array<string> = [];\r\n              // @ts-ignore\r\n              for (const key in errorErrors) {\r\n                if (Object.prototype.hasOwnProperty.call(errorErrors, key)) {\r\n                  const element: Array<string> = errorErrors[key];\r\n                  // console.log({ element })\r\n                  element.forEach(elem => {\r\n                    _errorErrors.push(`Item ${key}: ${elem}`)\r\n                  });\r\n                }\r\n              }\r\n              // @ts-ignore\r\n              input.setCustomValidity(_errorErrors.join('\\n'));\r\n            }\r\n            // @ts-ignore\r\n            input.reportValidity();\r\n            // @ts-ignore\r\n            input.isUiValid = false;\r\n          } catch (error) {\r\n            \r\n          }\r\n          // if (input.hasOwnProperty('setCustomValidity')) {\r\n          //   console.log({ input, });\r\n          //   // @ts-ignore\r\n          //   input.setCustomValidity(error.errors.join('\\n'));\r\n          //   // @ts-ignore\r\n          //   input.reportValidity();\r\n          //   // @ts-ignore\r\n          //   input.isUiValid = false;\r\n          // }\r\n        } else {\r\n          if (!nonNameErrorFields.includes(error)) {\r\n            nonNameErrorFields.push(error);\r\n          }\r\n        }\r\n      });\r\n    });\r\n    return { nameErrorFields, nonNameErrorFields }\r\n  }\r\n\r\n  private put(response: any | object, rawResponse: Response) {\r\n    this.response = response;\r\n  }\r\n\r\n  private patch(response: any | object, rawResponse: Response) {\r\n    this.response = response;\r\n  }\r\n\r\n  private delete(response: any | object, rawResponse: Response) {\r\n\r\n    let newResponse: NetworkCallResponse_I<string>;\r\n    if (response.hasOwnProperty('success') && response.hasOwnProperty('message')\r\n      && response.hasOwnProperty('data')) {\r\n      newResponse = response;\r\n    } else {\r\n      // console.log({\"rawResponse.ok\": rawResponse.ok});\r\n      if (rawResponse.ok) {\r\n        const SUCCESS_RESPONSE_MESSAGE = \"Deleted\";\r\n\r\n        this.response = this.outputResponse(true, SUCCESS_RESPONSE_MESSAGE, response);\r\n      } else if (response.hasOwnProperty('detail') && (rawResponse.status === 404)) {\r\n        newResponse = { data: [], message: response['detail'], success: false, };\r\n        this.response = this.outputResponse(newResponse.success, newResponse.message, []);\r\n      }\r\n    }\r\n  }\r\n}","export const formDataToJson = (formData: FormData) => {\r\n  let object: object = {};\r\n  formData.forEach((value, key) => {\r\n    // Reflect.has in favor of: object.hasOwnProperty(key)\r\n    if (!Reflect.has(object, key)) {\r\n      // @ts-ignore\r\n      object[key] = value;\r\n      return;\r\n    }\r\n    // @ts-ignore\r\n    if (!Array.isArray(object[key])) {\r\n      // @ts-ignore\r\n      object[key] = [object[key]];\r\n    }\r\n    // @ts-ignore\r\n    object[key].push(value);\r\n  });\r\n  return JSON.stringify(object);\r\n}","export const __swalStyle = `<style>#swal2-validation-message{\r\n  display: flex !important;\r\n  justify-content: flex-start !important;\r\n  font-weight: 600 !important;\r\n}#swal2-validation-message>ul{list-style: inside !important; margin: 0 !important;}</style>`;\r\nexport const https_swal_error_format = (error: any, addStyle = true) => {\r\n  // console.log({\"errorerror\": error})\r\n  if (Array.isArray(error)) {\r\n    const style = addStyle ? __swalStyle : ``;\r\n    let errorMsg = style + \"<ul>\";\r\n    const DATAS: Array<any> = error\r\n    // console.log({ DATAS });\r\n\r\n    DATAS.forEach((data) => {\r\n      // console.log({ data });\r\n      if (typeof data === \"string\") {\r\n        errorMsg += `<li>${data}</li>` + \"\\n\";\r\n      } else {\r\n        errorMsg += `<li>${data.error}</li>` + \"\\n\";\r\n      }\r\n\r\n    });\r\n    return errorMsg = errorMsg + \"</ul>\";\r\n  } else {\r\n    throw new Error(\"Unknown error response format\");\r\n  }\r\n}"],"names":["NetWorkCallResponses","constructor","method","httpResponse","error","postForm","response","multipleResponse","paginResponse","databaseResponse","jsonData","rawResponse","this","console","log","ok","cookieName","String","window","supersecret","unknowable","ops","set_cookies_minutes","Date","toUTCString","get","post","postFile","put","patch","delete","outputResponse","success","message","data","outputResponsePagin","output","count","next","previous","results","outputResponseDatatable","datatable_plugin","draw","recordsFiltered","recordsTotal","outputErrorResponse","nameError","unknownError","newResponse","hasOwnProperty","status","Error","Array","isArray","SUCCESS_RESPONSE_MESSAGE","map","_response","newResponses","forEach","postError","_newResponse","includes","push","errorFields","postErrorFields","nameErrorFields","postNamedErrorFields","nonNameErrorFields","postNonNamedErrorFields","postErrorInputs","errors","key","Object","prototype","call","id","validateInput","input","setCustomValidity","isUiValid","validityTransform","newValue","nativeValidity","valid","customError","_formDataToJson","JSON","parse","formDataToJson","FormData","document","querySelector","replace","addEventListener","event","querySelectorAll","errorErrors","join","_errorErrors","elem","reportValidity","formData","object","value","Reflect","has","stringify","__swalStyle","https_swal_error_format","addStyle","errorMsg"],"sourceRoot":""}