{"version":3,"file":"../../../client_dashboard/assets/v2/dev-files/js/src_addons_interfaces_clients_account_category_index_ts-src_addons_interfaces_location_countr-81861f.js","mappings":"8PAqBO,MAAMA,EACJC,oCAAoCC,GACzC,OAgHKC,EAhHOC,KAAKC,MAAMH,GAAOI,EAAE,8BAgHPC,GA7GpBN,wCAAwCO,GAC7C,OAAOJ,KAAKK,UAgHPN,EAhHwBK,EAAOF,EAAE,8BAgHbI,GAhH6C,KAAM,IAIhF,SAASC,EAAaC,EAAUC,EAAUC,EAAW,IAC/CA,GACFC,QAAQC,MAAM,0BAA0BF,qBAAuBV,KAAKK,UAAUG,cAAgBR,KAAKK,UAAUI,MAE/GE,QAAQC,MAAM,iBAAiBZ,KAAKK,UAAUI,eAAiBT,KAAKK,UAAUG,MAGhF,SAASL,EAAcK,GACrB,QAAqBK,IAAjBL,EAAIM,SAAwB,CAC9B,MAAMC,EAAW,GACjBP,EAAIQ,MAAMC,SAASC,GAAWH,EAAIG,EAAEpB,MAAQ,CAAEY,IAAKQ,EAAEC,GAAIX,IAAKU,EAAEV,OAChEA,EAAIM,SAAWC,EAEjB,OAAOP,EAAIM,SAGb,SAASR,EAAcE,GACrB,QAAqBK,IAAjBL,EAAIY,SAAwB,CAC9B,MAAML,EAAW,GACjBP,EAAIQ,MAAMC,SAASC,GAAWH,EAAIG,EAAEC,IAAM,CAAET,IAAKQ,EAAEpB,KAAMU,IAAKU,EAAEV,OAChEA,EAAIY,SAAWL,EAEjB,OAAOP,EAAIY,SAGb,SAASrB,EAAUU,EAAUD,EAAUa,EAAeX,EAAW,IA0D/D,GAAY,QAARF,EAAe,OAAOC,EAC1B,GAAY,OAARD,GACU,OAARC,EAAc,OAAOA,EAE3B,IAAY,IAARD,EAAJ,CACA,KAAsB,iBAARA,QAAgCK,IAAZL,EAAIc,KACpCd,EAAMe,EAAQf,EAAIc,KAEpB,OAAIE,MAAMC,QAAQjB,GAhDlB,SAAuBkB,EAAiBjB,GACtC,OAA4B,IAAxBiB,EAAMC,QAAQlB,GAAoBA,EAC/BF,EAAamB,EAAOjB,GA8CEmB,CAAcpB,EAAKC,GAC/B,iBAARD,EACFA,EAAIqB,eAAe,gBA9D5B,SAAwBC,EAAarB,GAEnC,MAAMsB,EAAID,EAAKE,OACf,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CAC1B,MAAMzB,EAAMsB,EAAKG,GACjB,IACE,OAAOlC,EAAUU,EAAKD,EAAKa,GAC3B,MAAOa,KAEX,OAAO3B,EAAauB,EAAMrB,GAqDkB0B,CAAe3B,EAAI4B,aAAc3B,GACzED,EAAIqB,eAAe,cA9CzB,SAAwBrB,EAAUC,GAEhC,OAAKe,MAAMC,QAAQhB,GACZA,EAAIM,KAAIsB,GAAMtC,EAAUsC,EAAI7B,EAAKa,KADRd,EAAa,QAASE,GA4Cf6B,CAAe9B,EAAI+B,WAAY9B,GAChED,EAAIqB,eAAe,SA9B3B,SAAyBb,EAA6BwB,EAAiB/B,GACrE,GAAY,OAARA,GAA+B,iBAARA,GAAoBe,MAAMC,QAAQhB,GAC3D,OAAOF,EAAa,SAAUE,GAEhC,MAAMgC,EAAc,GAWpB,OAVAC,OAAOC,oBAAoB3B,GAAOC,SAAQP,IACxC,MAAMkC,EAAO5B,EAAMN,GACbmC,EAAIH,OAAOI,UAAUjB,eAAekB,KAAKtC,EAAKC,GAAOD,EAAIC,QAAOG,EACtE4B,EAAOG,EAAKlC,KAAOX,EAAU8C,EAAGD,EAAKpC,IAAKa,EAAUuB,EAAKlC,QAE3DgC,OAAOC,oBAAoBlC,GAAKQ,SAAQP,IACjCgC,OAAOI,UAAUjB,eAAekB,KAAK/B,EAAON,KAC/C+B,EAAO/B,GAAOX,EAAUU,EAAIC,GAAM8B,EAAYnB,EAAUX,OAGrD+B,EAe6BO,CAAgB3B,EAASb,GAAMA,EAAIgC,WAAY/B,GAC3EF,EAAaC,EAAKC,GAGxBD,IAAQyC,MAAuB,iBAARxC,EA7C3B,SAAuBA,GACrB,GAAY,OAARA,EACF,OAAO,KAET,MAAMyC,EAAI,IAAID,KAAKxC,GACnB,OAAI0C,MAAMD,EAAEE,WACH7C,EAAa,OAAQE,GAEvByC,EAqC2CG,CAAc5C,GAzElE,SAA4BD,EAAaC,GACvC,cAAWD,UAAeC,EAAYA,EAC/BF,EAAaC,EAAKC,EAAKC,GAwEzB4C,CAAmB9C,EAAKC,IAejC,SAAS8C,KAAKzB,GACZ,MAAO,CAAEM,aAAcN,GAYzB,SAAS5B,EAAEsD,GACT,MAAO,CAAElC,IAAKkC,GAGT,MAAMjC,EAAe,CAC1B,4BAdSP,EAcuB,CAC9B,CAAElB,KAAM,KAAMqB,GAAI,KAAMX,IAAK+C,EAAE,KAAM,IACrC,CAAEzD,KAAM,WAAYqB,GAAI,WAAYX,IAAK+C,EAAE,KAAM,IACjD,CAAEzD,KAAM,WAAYqB,GAAI,WAAYX,IAAK+C,EAAE,KAAM,KACjD,CAAEzD,KAAM,YAAaqB,GAAI,YAAaX,IAAK+C,EAAE,KAAM,IACnD,CAAEzD,KAAM,YAAaqB,GAAI,YAAaX,IAAK+C,EAAE,KAAM,IACnD,CAAEzD,KAAM,aAAcqB,GAAI,aAAcX,IAAK+C,EAAE,KAAMN,OACrD,CAAEnD,KAAM,OAAQqB,GAAI,OAAQX,IAAK+C,EAAE,KAAMN,SACxC,EArBI,CAAEjC,MAAAA,EAAOwB,WAqBb,SAtBL,IAAWxB,G,2DCpIJ,MAAMpB,EACJC,sBAAsBC,GAC3B,OAiHKC,EAjHOC,KAAKC,MAAMH,GAAOI,EAAE,wBAiHPC,GA9GpBN,0BAA0BO,GAC/B,OAAOJ,KAAKK,UAiHPN,EAjHwBK,EAAOF,EAAE,wBAiHbI,GAjHuC,KAAM,IAI1E,SAASC,EAAaC,EAAUC,EAAUC,EAAW,IACnD,GAAIA,EACF,MAAM+C,MAAM,0BAA0B/C,qBAAuBV,KAAKK,UAAUG,cAAgBR,KAAKK,UAAUI,MAE7G,MAAMgD,MAAM,iBAAiBzD,KAAKK,UAAUI,eAAiBT,KAAKK,UAAUG,MAG9E,SAASL,EAAcK,GACrB,QAAqBK,IAAjBL,EAAIM,SAAwB,CAC9B,MAAMC,EAAW,GACjBP,EAAIQ,MAAMC,SAASC,GAAWH,EAAIG,EAAEpB,MAAQ,CAAEY,IAAKQ,EAAEC,GAAIX,IAAKU,EAAEV,OAChEA,EAAIM,SAAWC,EAEjB,OAAOP,EAAIM,SAGb,SAASR,EAAcE,GACrB,QAAqBK,IAAjBL,EAAIY,SAAwB,CAC9B,MAAML,EAAW,GACjBP,EAAIQ,MAAMC,SAASC,GAAWH,EAAIG,EAAEC,IAAM,CAAET,IAAKQ,EAAEpB,KAAMU,IAAKU,EAAEV,OAChEA,EAAIY,SAAWL,EAEjB,OAAOP,EAAIY,SAGb,SAASrB,EAAUU,EAAUD,EAAUa,EAAeX,EAAW,IA0D/D,GAAY,QAARF,EAAe,OAAOC,EAC1B,GAAY,OAARD,EACF,OAAY,OAARC,EAAqBA,EAClBF,EAAaC,EAAKC,GAE3B,IAAY,IAARD,EAAe,OAAOD,EAAaC,EAAKC,GAC5C,KAAsB,iBAARD,QAAgCK,IAAZL,EAAIc,KACpCd,EAAMe,EAAQf,EAAIc,KAEpB,OAAIE,MAAMC,QAAQjB,GAjDlB,SAAuBkB,EAAiBjB,GACtC,OAA4B,IAAxBiB,EAAMC,QAAQlB,GAAoBA,EAC/BF,EAAamB,EAAOjB,GA+CEmB,CAAcpB,EAAKC,GAC/B,iBAARD,EACFA,EAAIqB,eAAe,gBA/D5B,SAAwBC,EAAarB,GAEnC,MAAMsB,EAAID,EAAKE,OACf,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CAC1B,MAAMzB,EAAMsB,EAAKG,GACjB,IACE,OAAOlC,EAAUU,EAAKD,EAAKa,GAC3B,MAAOa,KAEX,OAAO3B,EAAauB,EAAMrB,GAsDkB0B,CAAe3B,EAAI4B,aAAc3B,GACzED,EAAIqB,eAAe,cA/CzB,SAAwBrB,EAAUC,GAEhC,OAAKe,MAAMC,QAAQhB,GACZA,EAAIM,KAAIsB,GAAMtC,EAAUsC,EAAI7B,EAAKa,KADRd,EAAa,QAASE,GA6Cf6B,CAAe9B,EAAI+B,WAAY9B,GAChED,EAAIqB,eAAe,SA/B3B,SAAyBb,EAA6BwB,EAAiB/B,GACrE,GAAY,OAARA,GAA+B,iBAARA,GAAoBe,MAAMC,QAAQhB,GAC3D,OAAOF,EAAa,SAAUE,GAEhC,MAAMgC,EAAc,GAWpB,OAVAC,OAAOC,oBAAoB3B,GAAOC,SAAQP,IACxC,MAAMkC,EAAO5B,EAAMN,GACbmC,EAAIH,OAAOI,UAAUjB,eAAekB,KAAKtC,EAAKC,GAAOD,EAAIC,QAAOG,EACtE4B,EAAOG,EAAKlC,KAAOX,EAAU8C,EAAGD,EAAKpC,IAAKa,EAAUuB,EAAKlC,QAE3DgC,OAAOC,oBAAoBlC,GAAKQ,SAAQP,IACjCgC,OAAOI,UAAUjB,eAAekB,KAAK/B,EAAON,KAC/C+B,EAAO/B,GAAOX,EAAUU,EAAIC,GAAM8B,EAAYnB,EAAUX,OAGrD+B,EAgB6BO,CAAgB3B,EAASb,GAAMA,EAAIgC,WAAY/B,GAC3EF,EAAaC,EAAKC,GAGxBD,IAAQyC,MAAuB,iBAARxC,EA9C3B,SAAuBA,GACrB,GAAY,OAARA,EACF,OAAO,KAET,MAAMyC,EAAI,IAAID,KAAKxC,GACnB,OAAI0C,MAAMD,EAAEE,WACH7C,EAAa,OAAQE,GAEvByC,EAsC2CG,CAAc5C,GA1ElE,SAA4BD,EAAaC,GACvC,cAAWD,UAAeC,EAAYA,EAC/BF,EAAaC,EAAKC,EAAKC,GAyEzB4C,CAAmB9C,EAAKC,GA4BjC,SAASP,EAAEsD,GACT,MAAO,CAAElC,IAAKkC,GAGT,MAAMjC,EAAe,CAC1B,sBAdSP,EAciB,CACxB,CAAElB,KAAM,KAAMqB,GAAI,KAAMX,IAAK,GAC7B,CAAEV,KAAM,OAAQqB,GAAI,OAAQX,IAAK,IACjC,CAAEV,KAAM,QAASqB,GAAI,QAASX,IAAK,IACnC,CAAEV,KAAM,OAAQqB,GAAI,OAAQX,IAAK,MAChC,EAlBI,CAAEQ,MAAAA,EAAOwB,WAkBb,SAnBL,IAAWxB","sources":["webpack://webpackNumbers/./src/addons/interfaces/clients/account_category/index.ts","webpack://webpackNumbers/./src/addons/interfaces/location/country_model/index.ts"],"sourcesContent":["// To parse this data:\n//\n//   import { Convert, ClientAccountCategoryModel } from \"./file\";\n//\n//   const clientAccountCategoryModel = Convert.toClientAccountCategoryModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface ClientAccountCategoryModel {\n  id?: number;\n  clientID?: number;\n  category?: string;\n  createdBy?: number;\n  updatedBy?: number;\n  updateDate?: Date;\n  date?: Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toClientAccountCategoryModel(json: string): ClientAccountCategoryModel {\n    return cast(JSON.parse(json), r(\"ClientAccountCategoryModel\"));\n  }\n\n  public static clientAccountCategoryModelToJson(value: ClientAccountCategoryModel): string {\n    return JSON.stringify(uncast(value, r(\"ClientAccountCategoryModel\")), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n  if (key) {\n    console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n  }\n  console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) { }\n    }\n    return invalidValue(typs, val);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(cases, val);\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(\"array\", val);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(\"Date\", val);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n      return invalidValue(\"object\", val);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key);\n      }\n    });\n    return result;\n  }\n\n  if (typ === \"any\") return val;\n  if (typ === null) {\n    if (val === null) return val;\n  }\n  if (typ === false) return;\n  while (typeof typ === \"object\" && typ.ref !== undefined) {\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === \"object\") {\n    return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n        : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n          : invalidValue(typ, val);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== \"number\") return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  // @ts-ignore\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nexport const typeMap: any = {\n  \"ClientAccountCategoryModel\": o([\n    { json: \"id\", js: \"id\", typ: u(null, 0) },\n    { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n    { json: \"category\", js: \"category\", typ: u(null, \"\") },\n    { json: \"createdBy\", js: \"createdBy\", typ: u(null, 0) },\n    { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n    { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n    { json: \"date\", js: \"date\", typ: u(null, Date) },\n  ], false),\n};\n","// To parse this data:\n//\n//   import { Convert, LocationCountryModel } from \"./file\";\n//\n//   const countryModel = Convert.toCountryModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface LocationCountryModel {\n  id: number;\n  name: string;\n  short: string;\n  code: string;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toCountryModel(json: string): LocationCountryModel {\n    return cast(JSON.parse(json), r(\"LocationCountryModel\"));\n  }\n\n  public static countryModelToJson(value: LocationCountryModel): string {\n    return JSON.stringify(uncast(value, r(\"LocationCountryModel\")), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = ''): never {\n  if (key) {\n    throw Error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n  }\n  throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`,);\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) { }\n    }\n    return invalidValue(typs, val);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(cases, val);\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(\"array\", val);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(\"Date\", val);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n      return invalidValue(\"object\", val);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key);\n      }\n    });\n    return result;\n  }\n\n  if (typ === \"any\") return val;\n  if (typ === null) {\n    if (val === null) return val;\n    return invalidValue(typ, val);\n  }\n  if (typ === false) return invalidValue(typ, val);\n  while (typeof typ === \"object\" && typ.ref !== undefined) {\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === \"object\") {\n    return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty(\"arrayItems\") ? transformArray(typ.arrayItems, val)\n        : typ.hasOwnProperty(\"props\") ? transformObject(getProps(typ), typ.additional, val)\n          : invalidValue(typ, val);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== \"number\") return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  //@ts-ignore\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nexport const typeMap: any = {\n  \"LocationCountryModel\": o([\n    { json: \"id\", js: \"id\", typ: 0 },\n    { json: \"name\", js: \"name\", typ: \"\" },\n    { json: \"short\", js: \"short\", typ: \"\" },\n    { json: \"code\", js: \"code\", typ: \"\" },\n  ], false),\n};\n"],"names":["Convert","static","json","transform","JSON","parse","r","jsonToJSProps","value","stringify","jsToJSONProps","invalidValue","typ","val","key","console","error","undefined","jsonToJS","map","props","forEach","p","js","jsToJSON","getProps","ref","typeMap","Array","isArray","cases","indexOf","transformEnum","hasOwnProperty","typs","l","length","i","_","transformUnion","unionMembers","el","transformArray","arrayItems","additional","result","Object","getOwnPropertyNames","prop","v","prototype","call","transformObject","Date","d","isNaN","valueOf","transformDate","transformPrimitive","u","name","Error"],"sourceRoot":""}