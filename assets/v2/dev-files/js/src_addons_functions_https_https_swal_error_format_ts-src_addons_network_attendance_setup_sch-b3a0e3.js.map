{"version":3,"file":"../../../client_dashboard/assets/v2/dev-files/js/src_addons_functions_https_https_swal_error_format_ts-src_addons_network_attendance_setup_sch-b3a0e3.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/classes/network_calls/response.ts","webpack://webpackNumbers/./src/addons/functions/form_data_to_object/index.ts","webpack://webpackNumbers/./src/addons/functions/https/https_swal_error_format.ts","webpack://webpackNumbers/./src/addons/network/attendance/setup/schedule/index.ts"],"sourcesContent":["import { set_cookies_minutes } from '@@addons/functions/cookies';\r\nimport { formDataToJson } from '@@addons/functions/form_data_to_object';\r\nimport { NetworkCallHttp_I } from '@@addons/interfaces/network_calls/http';\r\nimport {\r\n  NetworkCallDatatableResponse_I, NetworkCallError_I,\r\n  NetworkCallPaginResponse_I, NetworkCallPostResponse_I,\r\n  NetworkCallResponseMethod_I, NetworkCallResponse_I,\r\n} from '@@addons/interfaces/network_calls/response';\r\n\r\nexport class NetWorkCallResponses<Type> {\r\n  constructor(method: NetworkCallResponseMethod_I, httpResponse: NetworkCallHttp_I, error: boolean = false, postForm: HTMLFormElement = null) {\r\n    const response = httpResponse.jsonData,\r\n      rawResponse = httpResponse.response;\r\n    this.postForm = postForm;\r\n\r\n    if (httpResponse.response.ok) {\r\n      // @ts-ignore\r\n      const cookieName = String(window.supersecret.unknowable.ops.cookieName);\r\n      set_cookies_minutes(`${cookieName}_date`, new Date().toUTCString(), 10);\r\n    }\r\n    if (error) {\r\n      this.error(httpResponse.error);\r\n    } else {\r\n      if (method === \"get\") {\r\n        this.get(response, rawResponse);\r\n      } else if (method === \"post\") {\r\n        this.post(response, rawResponse);\r\n      } else if (method === \"put\") {\r\n        this.put(response, rawResponse);\r\n      } else if (method === \"patch\") {\r\n        this.patch(response, rawResponse);\r\n      } else if (method === \"delete\") {\r\n        this.delete(response, rawResponse);\r\n      }\r\n    }\r\n  }\r\n\r\n  public response: NetworkCallResponse_I<Type> | NetworkCallPostResponse_I = null;\r\n\r\n  public multipleResponse: Array<NetworkCallPostResponse_I> = null;\r\n\r\n  public paginResponse: NetworkCallPaginResponse_I<Type> = null;\r\n\r\n  public databaseResponse: NetworkCallDatatableResponse_I<Type> = null;\r\n\r\n  public postForm: HTMLFormElement = null;\r\n\r\n  private error(response: any | object) {\r\n    this.response = response;\r\n  }\r\n\r\n  private outputResponse(success: boolean, message: string | Array<any>,\r\n    data: Array<Type> | Type): NetworkCallResponse_I<Type> {\r\n    return { success: success, message: message, data: data };\r\n  }\r\n\r\n  private outputResponsePagin(output: any): NetworkCallPaginResponse_I<Type> {\r\n    return {\r\n      count: output.count, next: output.next, previous: output.previous,\r\n      results: output.results,\r\n    };\r\n  }\r\n\r\n  private outputResponseDatatable(output: any): NetworkCallDatatableResponse_I<Type> {\r\n    return {\r\n      data: output.data, datatable_plugin: output.datatable_plugin,\r\n      draw: output.draw, recordsFiltered: output.recordsFiltered,\r\n      recordsTotal: output.recordsTotal,\r\n    };\r\n  }\r\n\r\n  private outputErrorResponse(success: boolean, message: string | Array<NetworkCallError_I>,\r\n    nameError: Array<NetworkCallError_I>, unknownError: Array<NetworkCallError_I>, data: Array<any>): NetworkCallPostResponse_I {\r\n    return {\r\n      success: success, message: message, nameError: nameError,\r\n      unknownError: unknownError, data: data\r\n    };\r\n  }\r\n\r\n  private get(response: any | object, rawResponse: Response) {\r\n    let newResponse: NetworkCallResponse_I<Type>;\r\n    if (response.hasOwnProperty('success') && response.hasOwnProperty('message')\r\n      && response.hasOwnProperty('data')) {\r\n      newResponse = response;\r\n    } else if (response.hasOwnProperty('count') && response.hasOwnProperty('next')\r\n      && response.hasOwnProperty('previous') && response.hasOwnProperty('results')) {\r\n      this.paginResponse = this.outputResponsePagin(response);\r\n      return this.paginResponse;\r\n    } else if (response.hasOwnProperty('draw') && response.hasOwnProperty('recordsTotal')\r\n      && response.hasOwnProperty('recordsFiltered') && response.hasOwnProperty('data')) {\r\n      this.databaseResponse = this.outputResponseDatatable(response);\r\n      return this.databaseResponse;\r\n    } else if (response.hasOwnProperty('detail') && (rawResponse.status === 404)) {\r\n      newResponse = { data: [], message: response['detail'], success: false };\r\n    }\r\n\r\n    // console.log({ newResponse });\r\n\r\n\r\n    this.response = this.outputResponse(newResponse.success, newResponse.message, newResponse.data);\r\n  }\r\n\r\n  private post(response: any | object, rawResponse: Response) {\r\n\r\n    let newResponse: NetworkCallPostResponse_I;\r\n    if (response.hasOwnProperty('success') && response.hasOwnProperty('message')\r\n      && response.hasOwnProperty('data')) {\r\n      newResponse = response;\r\n    } else if (Array.isArray(response)) {\r\n      if (rawResponse.ok) {\r\n        const SUCCESS_RESPONSE_MESSAGE = response[0]['SUCCESS_RESPONSE_MESSAGE'];\r\n        response.map((_response) => {\r\n          delete _response['SUCCESS_RESPONSE_MESSAGE'];\r\n          return _response;\r\n        });\r\n\r\n        this.response = this.outputResponse(true, SUCCESS_RESPONSE_MESSAGE, response);\r\n      } else {\r\n        let newResponses: NetworkCallPostResponse_I[] = [];\r\n        response.forEach((_response) => {\r\n          newResponse = this.postError(_response);\r\n          const _newResponse = this.outputErrorResponse(\r\n            newResponse.success, newResponse.message, newResponse.nameError,\r\n            newResponse.unknownError, newResponse.data\r\n          );\r\n          if (!newResponses.includes(_newResponse)) {\r\n            newResponses.push(_newResponse);\r\n          }\r\n        });\r\n        this.multipleResponse = newResponses;\r\n      }\r\n    } else {\r\n      // console.log({\"rawResponse.ok\": rawResponse.ok});\r\n      if (rawResponse.ok) {\r\n        const SUCCESS_RESPONSE_MESSAGE = response['SUCCESS_RESPONSE_MESSAGE'];\r\n        delete response['SUCCESS_RESPONSE_MESSAGE'];\r\n\r\n        this.response = this.outputResponse(true, SUCCESS_RESPONSE_MESSAGE, response);\r\n      } else {\r\n        newResponse = this.postError(response);\r\n        this.response = this.outputErrorResponse(\r\n          newResponse.success, newResponse.message, newResponse.nameError,\r\n          newResponse.unknownError, newResponse.data\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private postError(response: any | object): NetworkCallPostResponse_I {\r\n    const errorFields = this.postErrorFields(response),\r\n      nameErrorFields = this.postNamedErrorFields(errorFields),\r\n      nonNameErrorFields = this.postNonNamedErrorFields(errorFields);\r\n\r\n    const postErrorInputs = this.postErrorInputs(nameErrorFields, nonNameErrorFields);\r\n    return {\r\n      success: false, message: errorFields, nameError: postErrorInputs.nameErrorFields,\r\n      unknownError: postErrorInputs.nonNameErrorFields, data: response\r\n    }\r\n  }\r\n\r\n  private postErrorFields(response: any | object) {\r\n    // console.log({response});\r\n\r\n    let errors: Array<NetworkCallError_I> = [];\r\n    for (const key in response) {\r\n      if (Object.prototype.hasOwnProperty.call(response, key)) {\r\n        const RES = response[key];\r\n        const error: NetworkCallError_I = {\r\n          id: key, errors: RES\r\n        };\r\n\r\n        if (!errors.includes(error)) {\r\n          errors.push(error);\r\n        }\r\n      }\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  private postNamedErrorFields(errorFields: NetworkCallError_I[]) {\r\n    let errors: Array<NetworkCallError_I> = [];\r\n\r\n    errorFields.forEach((error) => {\r\n      if (error.id !== \"non_field_errors\") {\r\n        if (!errors.includes(error)) {\r\n          errors.push(error);\r\n        }\r\n      }\r\n    });\r\n    return errors;\r\n  }\r\n\r\n  private postNonNamedErrorFields(errorFields: NetworkCallError_I[]) {\r\n    let errors: Array<NetworkCallError_I> = [];\r\n\r\n    errorFields.forEach((error) => {\r\n      if (error.id === \"non_field_errors\") {\r\n        if (!errors.includes(error)) {\r\n          errors.push(error);\r\n        }\r\n      }\r\n    });\r\n    return errors;\r\n  }\r\n\r\n  private validateInput(input: Element) {\r\n    // console.log({ input, });\r\n    // console.log({ \"input.hasOwnProperty('mdcFoundation')\": input.hasOwnProperty('mdcFoundation') });\r\n\r\n    if (input.hasOwnProperty('mdcFoundation')) {\r\n      // @ts-ignore\r\n      input.setCustomValidity(\"\");\r\n      // @ts-ignore\r\n      input.isUiValid = true;\r\n      // @ts-ignore\r\n      input.validityTransform = (newValue, nativeValidity) => {\r\n        // console.log({ newValue, nativeValidity, });\r\n        if (nativeValidity.valid) {\r\n          return {};\r\n        } else {\r\n          return {\r\n            valid: false,\r\n            customError: true,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private postErrorInputs(nameErrorFields: NetworkCallError_I[], nonNameErrorFields: NetworkCallError_I[]) {\r\n    // console.log({ \"this.postForm\": this.postForm });\r\n    // console.log({ \"this.postForm.elements\": this.postForm.elements });\r\n\r\n    const _formDataToJson = JSON.parse(formDataToJson(new FormData(this.postForm)));\r\n    // console.log({ _formDataToJson });\r\n    for (const key in _formDataToJson) {\r\n      let input: Element;\r\n      try {\r\n        input = document.querySelector('[name=' + key + ']');\r\n      } catch (error) {\r\n        input = document.querySelector('[id=' + key.replace('[]', '') + ']');\r\n      }\r\n      this.validateInput(input);\r\n      input.addEventListener('change', (event) => {\r\n        this.validateInput(input);\r\n      });\r\n    }\r\n\r\n\r\n    nameErrorFields.forEach((error) => {\r\n      const inputs = document.querySelectorAll('[id=\"' + error.id + '\"]');\r\n      // console.log({ error, inputs });\r\n\r\n      inputs.forEach((input) => {\r\n        if (input.hasOwnProperty('mdcFoundation')) {\r\n          try {\r\n            // console.log({ input, \"error.errors\": error.errors, });\r\n            // console.log({\"_____typeof error.errors_____\": Array.isArray(error.errors) });\r\n            const errorErrors = error.errors;\r\n            if (Array.isArray(errorErrors)) {\r\n              // @ts-ignore\r\n              input.setCustomValidity(errorErrors.join('\\n'));\r\n            } else {\r\n              let _errorErrors: Array<string> = [];\r\n              // @ts-ignore\r\n              for (const key in errorErrors) {\r\n                if (Object.prototype.hasOwnProperty.call(errorErrors, key)) {\r\n                  const element: Array<string> = errorErrors[key];\r\n                  // console.log({ element })\r\n                  element.forEach(elem => {\r\n                    _errorErrors.push(`Item ${key}: ${elem}`)\r\n                  });\r\n                }\r\n              }\r\n              // @ts-ignore\r\n              input.setCustomValidity(_errorErrors.join('\\n'));\r\n            }\r\n            // @ts-ignore\r\n            input.reportValidity();\r\n            // @ts-ignore\r\n            input.isUiValid = false;\r\n          } catch (error) {\r\n            \r\n          }\r\n          // if (input.hasOwnProperty('setCustomValidity')) {\r\n          //   console.log({ input, });\r\n          //   // @ts-ignore\r\n          //   input.setCustomValidity(error.errors.join('\\n'));\r\n          //   // @ts-ignore\r\n          //   input.reportValidity();\r\n          //   // @ts-ignore\r\n          //   input.isUiValid = false;\r\n          // }\r\n        } else {\r\n          if (!nonNameErrorFields.includes(error)) {\r\n            nonNameErrorFields.push(error);\r\n          }\r\n        }\r\n      });\r\n    });\r\n    return { nameErrorFields, nonNameErrorFields }\r\n  }\r\n\r\n  private put(response: any | object, rawResponse: Response) {\r\n    this.response = response;\r\n  }\r\n\r\n  private patch(response: any | object, rawResponse: Response) {\r\n    this.response = response;\r\n  }\r\n\r\n  private delete(response: any | object, rawResponse: Response) {\r\n\r\n    let newResponse: NetworkCallResponse_I<string>;\r\n    if (response.hasOwnProperty('success') && response.hasOwnProperty('message')\r\n      && response.hasOwnProperty('data')) {\r\n      newResponse = response;\r\n    } else {\r\n      // console.log({\"rawResponse.ok\": rawResponse.ok});\r\n      if (rawResponse.ok) {\r\n        const SUCCESS_RESPONSE_MESSAGE = \"Deleted\";\r\n\r\n        this.response = this.outputResponse(true, SUCCESS_RESPONSE_MESSAGE, response);\r\n      } else if (response.hasOwnProperty('detail') && (rawResponse.status === 404)) {\r\n        newResponse = { data: [], message: response['detail'], success: false, };\r\n        this.response = this.outputResponse(newResponse.success, newResponse.message, []);\r\n      }\r\n    }\r\n  }\r\n}","export const formDataToJson = (formData: FormData) => {\r\n  let object: object = {};\r\n  formData.forEach((value, key) => {\r\n    // Reflect.has in favor of: object.hasOwnProperty(key)\r\n    if (!Reflect.has(object, key)) {\r\n      // @ts-ignore\r\n      object[key] = value;\r\n      return;\r\n    }\r\n    // @ts-ignore\r\n    if (!Array.isArray(object[key])) {\r\n      // @ts-ignore\r\n      object[key] = [object[key]];\r\n    }\r\n    // @ts-ignore\r\n    object[key].push(value);\r\n  });\r\n  return JSON.stringify(object);\r\n}","export const __swalStyle = `<style>#swal2-validation-message{\r\n  display: flex !important;\r\n  justify-content: flex-start !important;\r\n  font-weight: 600 !important;\r\n}#swal2-validation-message>ul{list-style: inside !important;}</style>`;\r\nexport const https_swal_error_format = (error: any, addStyle = true) => {\r\n  if (Array.isArray(error)) {\r\n    const style = addStyle ? __swalStyle : ``;\r\n    let errorMsg = style + \"<ul>\";\r\n    const DATAS: Array<any> = error\r\n    // console.log({ DATAS });\r\n\r\n    DATAS.forEach((data) => {\r\n      // console.log({ data });\r\n      errorMsg += `<li>${data.error}</li>` + \"\\n\";\r\n\r\n    });\r\n    return errorMsg = errorMsg + \"</ul>\";\r\n  } else {\r\n    throw new Error(\"Unknown error response format\");\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { get_cookie } from \"@@addons/functions/cookies\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { base64Decode } from \"@@addons/functions/base64\";\r\nimport { LoginTokenType_I } from \"@@addons/interfaces/login_token\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { verifyToken } from \"@@addons/functions/login\";\r\n\r\nexport async function GET_AttendanceSchedule<Type>(ID: Number = null, url_params: string = \"\", loginTokenType: LoginTokenType_I = \"client_tokenLogin\") {\r\n  \r\n  // @ts-ignore\r\n  const WsUoI = String(window.supersecret.unknowable.ops.id);\r\n  // @ts-ignore\r\n  const WsUoE = String(window.supersecret.unknowable.ops.email);\r\n\r\n  await verifyToken(WsUoE, WsUoI, loginTokenType);\r\n  const _get_cookie = base64Decode(get_cookie(loginTokenType));\r\n  // console.log({_get_cookie});\r\n  \r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/schedule'\r\n    + (ID === null ? \"\" : \"/\" + ID) + (url_params),\r\n    HTTP = await http(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"Token \" + _get_cookie\r\n      }\r\n    }, true);\r\n  try {\r\n    return new NetWorkCallResponses<Type>(\"get\", HTTP);\r\n  } catch (error) {\r\n    console.error({ error });\r\n    let errorHttp = HTTP;\r\n    errorHttp['error'] = error;\r\n    return new NetWorkCallResponses<Type>(\"get\", errorHttp, true);\r\n  }\r\n}"],"names":["NetWorkCallResponses","constructor","method","httpResponse","error","postForm","response","multipleResponse","paginResponse","databaseResponse","jsonData","rawResponse","this","ok","cookieName","String","window","supersecret","unknowable","ops","set_cookies_minutes","Date","toUTCString","get","post","put","patch","delete","outputResponse","success","message","data","outputResponsePagin","output","count","next","previous","results","outputResponseDatatable","datatable_plugin","draw","recordsFiltered","recordsTotal","outputErrorResponse","nameError","unknownError","newResponse","hasOwnProperty","status","Array","isArray","SUCCESS_RESPONSE_MESSAGE","map","_response","newResponses","forEach","postError","_newResponse","includes","push","errorFields","postErrorFields","nameErrorFields","postNamedErrorFields","nonNameErrorFields","postNonNamedErrorFields","postErrorInputs","errors","key","Object","prototype","call","id","validateInput","input","setCustomValidity","isUiValid","validityTransform","newValue","nativeValidity","valid","customError","_formDataToJson","JSON","parse","formDataToJson","FormData","document","querySelector","replace","addEventListener","event","querySelectorAll","errorErrors","join","_errorErrors","elem","reportValidity","formData","object","value","Reflect","has","stringify","__swalStyle","https_swal_error_format","addStyle","errorMsg","Error","GET_AttendanceSchedule","ID","url_params","loginTokenType","WsUoI","WsUoE","email","verifyToken","_get_cookie","base64Decode","get_cookie","url","CONSTANTS","HTTP","http","headers","Authorization","console","errorHttp"],"sourceRoot":""}